scriptencoding utf-8

let s:save_cpo = &cpo
set cpo&vim

function! ccline#command#command()
  if !exists('s:session_id') || ccline#session_id() > s:session_id
    let s:user_command = s:get_user_command()
    let s:command = extend(deepcopy(s:default_command), s:user_command)
    let s:session_id = ccline#session_id()
  endif
  return s:command
endfunction

function! ccline#command#current_command(str)
  let exprs = s:parse_line(a:str)
  if empty(exprs)
    return ':'
  endif
  let expr = exprs[len(exprs) - 1]
  let commands = expr[1]
  let current_command = commands[len(commands) - 1][1]
  if empty(current_command)
    return ':'
  endif
  return ccline#command#expand_alias(current_command)
endfunction

function! s:iscommand(expr)
  return has_key(ccline#command#command(), a:expr)
endfunction

function! ccline#command#parse(str)
  let single_quote = "'"
  let double_quote = '"'
  let space = ' '
  let escape = '\'
  let bar = '|'

  let normal = 0
  let single_quote_inner = 1
  let double_quote_inner = 2
  let space_inner = 3

  let state = space_inner

  let endflag = 0
  let escapeflag = 0

  let result = []
  let spaceresult = []

  let part = ''
  let spacepart = ''

  for char in split(a:str, '\zs')
    if state == single_quote_inner
      if char ==# single_quote
        let endflag = !endflag
        let part .= char
        continue
      else
        if endflag
          let state = (char ==# space) ? space_inner : normal
          let endflag = 0
        else
          let part .= char
          continue
        endif
      endif
    elseif state == double_quote_inner
      if char ==# double_quote
        let endflag = !endflag
        let part .= char
        continue
      else
        if endflag
          let state = (char ==# space) ? space_inner : normal
          let endflag = 0
        else
          let part .= char
          continue
        endif
      endif
    endif

    if state == space_inner
      if char ==# space
        let spacepart .= char
      else
        let spaceresult += [spacepart]
        let spacepart = ''
        let state = normal
      endif
    endif

    if state == normal
      if char ==# single_quote
        let state = single_quote_inner
        let part .= char
      elseif char ==# double_quote
        let state = double_quote_inner
        let part .= char
      elseif char ==# space
        if escapeflag
          let part .= char
          let escapeflag = 0
        else
          let state = space_inner
          if !empty(part)
            let result += [part]
          endif
          let part = ''
          let spacepart .= char
        endif
      elseif char ==# escape
        let escapeflag = !escapeflag
        let part .= char
      elseif char ==# bar
        if escapeflag
          let part .= char
          let escapeflag = 0
        else
          if !empty(part)
            let result += [part]
          endif
          let result += [char]
          let part = ''
        endif
      else
        let escapeflag = 0
        let part .= char
      endif
    endif
  endfor
  if !empty(part)
    let result += [part]
  endif
  if !empty(spacepart)
    let spaceresult += [spacepart]
  endif
  if state != space_inner
    call add(spaceresult, '')
  endif
  return [result, spaceresult]
endfunction

function! s:split_list(list, separator)
  let result = []
  let e = 0
  for i in range(len(a:list))
    if a:list[i] ==# a:separator
      let result += [a:list[e : i - 1]]
      let e = i + 1
    endif
  endfor
  let result += [a:list[e : len(a:list) - 1]]
  return result
endfunction

function! s:combine(part, space)
  let result = []
  for i in range(len(a:part))
    let result += [a:space[i], a:part[i]]
  endfor
  " return result + [a:space[i + 1]]
  return result + [a:space[len(a:space) - 1]]
endfunction

" base code
" https://github.com/thinca/vim-ambicmd/blob/78fa88c5647071e73a3d21e5f575ed408f68aaaf/autoload/ambicmd.vim#L26
function! s:separate_range(line)
  let search_pattern = '\v/[^/]*\\@<!%(\\\\)*/|\?[^?]*\\@<!%(\\\\)*\?'
  let line_specifier = '\v%(\d+|[.$]|''\S|\\[/?&])?%([+-]\d*|' . search_pattern . ')*'
  let range_pattern = '\v^%(\%|' . line_specifier . '%([;,]' . line_specifier . ')*)'
  let range = matchstr(a:line, range_pattern)
  return [range, strpart(a:line, strlen(range))]
endfunction

function! s:separate_bang(expr)
  let bang = matchstr(a:expr, '^\a\+\zs!$')
  return [strpart(a:expr, 0, strlen(a:expr) - strlen(bang)), bang]
endfunction

function! s:extract_command(line)
  let command = s:separate_range(a:line)
  let command = [command[0]] + s:separate_bang(matchstr(command[1], '^\a\+!\?'))
  return command
endfunction

function! s:parse_args(str, bar)
  let result = []
  let pos = 0
  let escape_pat = '\%(\\\\\)*\\'
  let escape_space_pat = escape_pat . '\@<=\s'
  let escape_bar_pat = escape_pat . '\@<=|'
  let nonspace_pat = a:bar ? '^\%([^|[:blank:]]\|' . escape_space_pat . '\|' . escape_bar_pat . '\)*'
  \                        : '^\%(\S\|' . escape_space_pat . '\)*'
  while pos < strlen(a:str)
    let p = matchstr(a:str, nonspace_pat, pos)
    let pos += strlen(p)
    let s = matchstr(a:str, '\s*', pos)
    let pos += strlen(s)
    let result += [[p, s]]
    if a:bar && match(a:str, '^|', pos) == pos
      break
    endif
  endwhile
  return result
endfunction

function! s:parse_line(line)
  let result = []
  let expr = ['', [], []]
  let commands = []
  let on_command = 1
  let start_expr = 1
  let bar = 0
  let pos = 0
  while pos < strlen(a:line)
    if start_expr
      let bar = matchstr(strpart(a:line, pos), '^\(\s\||\)*')
      let pos += strlen(bar)
      let expr[0] = bar
    endif
    if on_command
      let command = s:extract_command(strpart(a:line, pos))
      let pos += strlen(join(command, ''))
      let space = matchstr(strpart(a:line, pos), '^\s*')
      let commands += [command + [space]]
      let pos += strlen(space)
      let cmd = ccline#command#expand_alias(command[1])
      if has_key(ccline#command#command(), cmd)
        let c = ccline#command#command()[cmd]
        let on_command = (get(c, 'complete', '') ==# 'command')
        let bar = get(c, 'bar', 0)
      else
        let on_command = 0
        let bar = 0
      endif
      let expr[1] += commands
      let commands = []
      let start_expr = 0
    else
      let args = s:parse_args(strpart(a:line, pos), bar)
      let expr[2] = args
      let pos += strlen(join(map(copy(args), 'join(v:val, "")'), ''))
      let result += [expr]
      let expr = ['', [], []]
      let start_expr = 1
      let on_command = 1
    endif
  endwhile
  let result += [expr]
  return result
endfunction

function! s:get_user_command()
  let result = {}
  let command = split(ccline#complete#capture('command'), '[\r\n]')
  call remove(command, 0)
  for line in command
    let p = s:parse_command_list(line)
    let result[p[0]] = p[1]
  endfor
  return result
endfunction
function! s:parse_command_list(line)
  let first = strpart(a:line, 0, 2)
  let bang = (stridx(first, '!') >= 0)
  let register = (stridx(first, '"') >= 0)
  let buffer_local = (stridx(first, 'b') >= 0)
  let name = matchstr(strpart(a:line, 4), '^[A-Z]\S*')
  let name_len = strlen(name)
  if name_len <= 11
    let args = strpart(a:line, 16, 1)
    let range = matchstr(strpart(a:line, 21), '^\S\+')
    let complete = matchstr(strpart(a:line, 27), '^\S\+')
  else
    let args = strpart(a:line, name_len+5, 1)
    let range = matchstr(strpart(a:line, name_len+10), '^\S\+')
    let complete = matchstr(strpart(a:line, name_len+16), '^\S\+')
  endif
  return [name, {'bang': bang, 'register': register, 'buffer_local': buffer_local, 'args': args, 'range': range, 'complete': complete}]
endfunction

let s:default_command = {
\ '!': {'bar': 1, 'complete': 'shellcmd'},
\ '#': {'bar': 1},
\ '&': {'bar': 1},
\ '*': {'bar': 1},
\ '<': {'bar': 1},
\ '=': {'bar': 1},
\ '>': {'bar': 1},
\ '@': {'bar': 1},
\ 'Next': {'bar': 1},
\ 'Print': {'bar': 1},
\ 'X': {'bar': 1},
\ 'abbreviate': {'bar': 1},
\ 'abclear': {'bar': 1},
\ 'aboveleft': {'bar': 1},
\ 'all': {'bar': 1},
\ 'amenu': {'bar': 1},
\ 'anoremenu': {'bar': 1},
\ 'append': {'bar': 1},
\ 'argadd': {'bar': 1, 'complete': 'file'},
\ 'argdelete': {'bar': 1, 'complete': 'file'},
\ 'argdo': {'bar': 0, 'complete': 'command'},
\ 'argedit': {'bar': 1, 'complete': 'file'},
\ 'argglobal': {'bar': 1, 'complete': 'file'},
\ 'arglocal': {'bar': 1, 'complete': 'file'},
\ 'args': {'bar': 1, 'complete': 'file'},
\ 'argument': {'bar': 1, 'complete': ''},
\ 'ascii': {'bar': 1, 'complete': ''},
\ 'augroup': {'bar': 1, 'complete': 'augroup'},
\ 'aunmenu': {'bar': 1},
\ 'autocmd': {'bar': 0, 'complete': 'event'},
\ 'bNext': {'bar': 1},
\ 'badd': {'bar': 1},
\ 'ball': {'bar': 1},
\ 'bdelete': {'bar': 1},
\ 'behave': {'bar': 1, 'complete': 'behave'},
\ 'belowright': {'bar': 1},
\ 'bfirst': {'bar': 1},
\ 'blast': {'bar': 1},
\ 'bmodified': {'bar': 1},
\ 'bnext': {'bar': 1},
\ 'botright': {'bar': 1},
\ 'bprevious': {'bar': 1},
\ 'break': {'bar': 1, 'complete': ''},
\ 'breakadd': {'bar': 1},
\ 'breakdel': {'bar': 1},
\ 'breaklist': {'bar': 1},
\ 'brewind': {'bar': 1},
\ 'browse': {'bar': 1},
\ 'bufdo': {'bar': 0},
\ 'buffer': {'bar': 1, 'complete': 'buffer'},
\ 'buffers': {'bar': 1},
\ 'bunload': {'bar': 1},
\ 'bwipeout': {'bar': 1},
\ 'cNext': {'bar': 1},
\ 'cNfile': {'bar': 1},
\ 'cabbrev': {'bar': 1},
\ 'cabclear': {'bar': 1},
\ 'caddbuffer': {'bar': 1},
\ 'caddexpr': {'bar': 1},
\ 'caddfile': {'bar': 1},
\ 'call': {'bar': 1, 'complete': 'function'},
\ 'catch': {'bar': 1, 'complete': ''},
\ 'cbuffer': {'bar': 1},
\ 'cc': {'bar': 1, 'complete': ''},
\ 'cclose': {'bar': 1},
\ 'cd': {'bar': 1, 'complete': 'dir'},
\ 'center': {'bar': 1},
\ 'cexpr': {'bar': 1},
\ 'cfile': {'bar': 1},
\ 'cfirst': {'bar': 1},
\ 'cgetbuffer': {'bar': 1},
\ 'cgetexpr': {'bar': 1},
\ 'cgetfile': {'bar': 1},
\ 'change': {'bar': 1},
\ 'changes': {'bar': 1},
\ 'chdir': {'bar': 1, 'complete': 'dir'},
\ 'checkpath': {'bar': 1},
\ 'checktime': {'bar': 1},
\ 'clast': {'bar': 1},
\ 'clist': {'bar': 1},
\ 'close': {'bar': 1},
\ 'cmap': {'bar': 1, 'complete': 'mapping'},
\ 'cmapclear': {'bar': 1, 'complete': ''},
\ 'cmenu': {'bar': 1},
\ 'cnewer': {'bar': 1},
\ 'cnext': {'bar': 1},
\ 'cnfile': {'bar': 1},
\ 'cnoreabbrev': {'bar': 1},
\ 'cnoremap': {'bar': 1, 'complete': 'mapping'},
\ 'cnoremenu': {'bar': 1},
\ 'colder': {'bar': 1},
\ 'colorscheme': {'bar': 1, 'complete': 'color'},
\ 'comclear': {'bar': 1},
\ 'command': {'bar': 0, 'complete': 'command'},
\ 'compiler': {'bar': 1, 'complete': 'compiler'},
\ 'confirm': {'bar': 1},
\ 'continue': {'bar': 1},
\ 'copen': {'bar': 1},
\ 'copy': {'bar': 1},
\ 'cpfile': {'bar': 1},
\ 'cprevious': {'bar': 1},
\ 'cquit': {'bar': 1},
\ 'crewind': {'bar': 1},
\ 'cscope': {'bar': 0, 'complete': 'cscope'},
\ 'cstag': {'bar': 1},
\ 'cunabbrev': {'bar': 1},
\ 'cunmap': {'bar': 1, 'complete': 'mapping'},
\ 'cunmenu': {'bar': 1},
\ 'cwindow': {'bar': 1},
\ 'debug': {'bar': 0},
\ 'debuggreedy': {'bar': 1},
\ 'delcommand': {'bar': 1},
\ 'delete': {'bar': 1},
\ 'delfunction': {'bar': 1},
\ 'delmarks': {'bar': 1},
\ 'diffget': {'bar': 1},
\ 'diffoff': {'bar': 1},
\ 'diffpatch': {'bar': 1},
\ 'diffput': {'bar': 1},
\ 'diffsplit': {'bar': 1},
\ 'diffthis': {'bar': 1},
\ 'diffupdate': {'bar': 1},
\ 'digraphs': {'bar': 1},
\ 'display': {'bar': 1},
\ 'djump': {'bar': 1},
\ 'dlist': {'bar': 1},
\ 'doautoall': {'bar': 1},
\ 'doautocmd': {'bar': 1},
\ 'drop': {'bar': 1},
\ 'dsearch': {'bar': 1},
\ 'dsplit': {'bar': 1},
\ 'earlier': {'bar': 1},
\ 'echo': {'bar': 1, 'complete': 'function'},
\ 'echoerr': {'bar': 1, 'complete': 'function'},
\ 'echohl': {'bar': 1, 'complete': 'highlight'},
\ 'echomsg': {'bar': 1, 'complete': 'function'},
\ 'echon': {'bar': 1, 'complete': 'function'},
\ 'edit': {'bar': 1, 'complete': 'file'},
\ 'else': {'bar': 1, 'complete': ''},
\ 'elseif': {'bar': 1},
\ 'emenu': {'bar': 1},
\ 'endfor': {'bar': 1, 'complete': ''},
\ 'endfunction': {'bar': 1, 'complete': ''},
\ 'endif': {'bar': 1, 'complete': ''},
\ 'endtry': {'bar': 1, 'complete': ''},
\ 'endwhile': {'bar': 1, 'complete': ''},
\ 'enew': {'bar': 1, 'complete': ''},
\ 'ex': {'bar': 1},
\ 'execute': {'bar': 1},
\ 'exit': {'bar': 1},
\ 'exusage': {'bar': 1},
\ 'file': {'bar': 1},
\ 'files': {'bar': 1},
\ 'filetype': {'bar': 1},
\ 'finally': {'bar': 1},
\ 'find': {'bar': 1},
\ 'finish': {'bar': 1, 'complete': ''},
\ 'first': {'bar': 1, 'complete': ''},
\ 'fixdel': {'bar': 1},
\ 'fold': {'bar': 1, 'complete': ''},
\ 'foldclose': {'bar': 1, 'complete': ''},
\ 'folddoclosed': {'bar': 0, 'complete': 'command'},
\ 'folddoopen': {'bar': 0, 'complete': 'command'},
\ 'foldopen': {'bar': 1, 'complete': ''},
\ 'for': {'bar': 1},
\ 'function': {'bar': 0},
\ 'global': {'bar': 0},
\ 'goto': {'bar': 1},
\ 'grep': {'bar': 1},
\ 'grepadd': {'bar': 1},
\ 'gui': {'bar': 1},
\ 'gvim': {'bar': 1},
\ 'hardcopy': {'bar': 1},
\ 'help': {'bar': 0, 'complete': 'help'},
\ 'helpfind': {'bar': 0, 'complete': ''},
\ 'helpgrep': {'bar': 1, 'complete': ''},
\ 'helptags': {'bar': 1, 'complete': 'dir'},
\ 'hide': {'bar': 1},
\ 'highlight': {'bar': 1, 'complete': 'highlight'},
\ 'history': {'bar': 1, 'complete': 'history'},
\ 'iabbrev': {'bar': 1},
\ 'iabclear': {'bar': 1},
\ 'if': {'bar': 1},
\ 'ijump': {'bar': 1},
\ 'ilist': {'bar': 1},
\ 'imap': {'bar': 1, 'complete': 'mapping'},
\ 'imapclear': {'bar': 1, 'complete': ''},
\ 'imenu': {'bar': 1},
\ 'inoreabbrev': {'bar': 1},
\ 'inoremap': {'bar': 1, 'complete': 'mapping'},
\ 'inoremenu': {'bar': 1},
\ 'insert': {'bar': 1},
\ 'intro': {'bar': 1, 'complete': ''},
\ 'isearch': {'bar': 1},
\ 'isplit': {'bar': 1},
\ 'iunabbrev': {'bar': 1},
\ 'iunmap': {'bar': 1, 'complete': 'mapping'},
\ 'iunmenu': {'bar': 1},
\ 'join': {'bar': 1},
\ 'jumps': {'bar': 1, 'complete': ''},
\ 'k': {'bar': 1},
\ 'keepalt': {'bar': 1},
\ 'keepjumps': {'bar': 1},
\ 'keepmarks': {'bar': 1},
\ 'keeppatterns': {'bar': 1},
\ 'lNext': {'bar': 1},
\ 'lNfile': {'bar': 1},
\ 'laddbuffer': {'bar': 1},
\ 'laddexpr': {'bar': 1},
\ 'laddfile': {'bar': 1},
\ 'language': {'bar': 1},
\ 'last': {'bar': 1},
\ 'later': {'bar': 1},
\ 'lbuffer': {'bar': 1},
\ 'lcd': {'bar': 1, 'complete': 'dir'},
\ 'lchdir': {'bar': 1, 'complete': 'dir'},
\ 'lclose': {'bar': 1},
\ 'lcscope': {'bar': 0},
\ 'left': {'bar': 1},
\ 'leftabove': {'bar': 1},
\ 'let': {'bar': 1},
\ 'lexpr': {'bar': 1},
\ 'lfile': {'bar': 1},
\ 'lfirst': {'bar': 1},
\ 'lgetbuffer': {'bar': 1},
\ 'lgetexpr': {'bar': 1},
\ 'lgetfile': {'bar': 1},
\ 'lgrep': {'bar': 1},
\ 'lgrepadd': {'bar': 1},
\ 'lhelpgrep': {'bar': 1},
\ 'list': {'bar': 1},
\ 'll': {'bar': 1},
\ 'llast': {'bar': 1},
\ 'llist': {'bar': 1},
\ 'lmake': {'bar': 1, 'complete': 'file'},
\ 'lmap': {'bar': 1, 'complete': 'mapping'},
\ 'lmapclear': {'bar': 1, 'complete': ''},
\ 'lnewer': {'bar': 1},
\ 'lnext': {'bar': 1},
\ 'lnfile': {'bar': 1},
\ 'lnoremap': {'bar': 1, 'complete': 'mapping'},
\ 'loadkeymap': {'bar': 1},
\ 'loadview': {'bar': 1},
\ 'lockmarks': {'bar': 1},
\ 'lockvar': {'bar': 1},
\ 'lolder': {'bar': 1},
\ 'lopen': {'bar': 1},
\ 'lpfile': {'bar': 1},
\ 'lprevious': {'bar': 1},
\ 'lrewind': {'bar': 1},
\ 'ls': {'bar': 1},
\ 'ltag': {'bar': 1},
\ 'lua': {'bar': 1},
\ 'luado': {'bar': 1},
\ 'luafile': {'bar': 1},
\ 'lunmap': {'bar': 1, 'complete': 'mapping'},
\ 'lvimgrep': {'bar': 1},
\ 'lvimgrepadd': {'bar': 1},
\ 'lwindow': {'bar': 1},
\ 'make': {'bar': 0},
\ 'map': {'bar': 1, 'complete': 'mapping'},
\ 'mapclear': {'bar': 1, 'complete': ''},
\ 'mark': {'bar': 1},
\ 'marks': {'bar': 1},
\ 'match': {'bar': 1},
\ 'menu': {'bar': 1},
\ 'menutranslate': {'bar': 1},
\ 'messages': {'bar': 1},
\ 'mkexrc': {'bar': 1},
\ 'mksession': {'bar': 1},
\ 'mkspell': {'bar': 1},
\ 'mkview': {'bar': 1},
\ 'mkvimrc': {'bar': 1},
\ 'mode': {'bar': 1},
\ 'move': {'bar': 1},
\ 'mzfile': {'bar': 1},
\ 'mzscheme': {'bar': 1},
\ 'nbclose': {'bar': 1},
\ 'nbkey': {'bar': 1},
\ 'nbstart': {'bar': 1},
\ 'new': {'bar': 1, 'complete': 'file'},
\ 'next': {'bar': 1},
\ 'nmap': {'bar': 1, 'complete': 'mapping'},
\ 'nmapclear': {'bar': 1, 'complete': ''},
\ 'nmenu': {'bar': 1},
\ 'nnoremap': {'bar': 1, 'complete': 'mapping'},
\ 'nnoremenu': {'bar': 1},
\ 'noautocmd': {'bar': 1, 'complete': 'command'},
\ 'nohlsearch': {'bar': 1},
\ 'noreabbrev': {'bar': 1},
\ 'noremap': {'bar': 1, 'complete': 'mapping'},
\ 'noremenu': {'bar': 1},
\ 'normal': {'bar': 0},
\ 'noswapfile': {'bar': 1},
\ 'number': {'bar': 1},
\ 'nunmap': {'bar': 1, 'complete': 'mapping'},
\ 'nunmenu': {'bar': 1},
\ 'oldfiles': {'bar': 1},
\ 'omap': {'bar': 1, 'complete': 'mapping'},
\ 'omapclear': {'bar': 1, 'complete': ''},
\ 'omenu': {'bar': 1},
\ 'only': {'bar': 1},
\ 'onoremap': {'bar': 1, 'complete': 'mapping'},
\ 'onoremenu': {'bar': 1},
\ 'open': {'bar': 1},
\ 'options': {'bar': 1},
\ 'ounmap': {'bar': 1, 'complete': 'mapping'},
\ 'ounmenu': {'bar': 1},
\ 'ownsyntax': {'bar': 1, 'complete': 'syntax'},
\ 'pclose': {'bar': 1},
\ 'pedit': {'bar': 1, 'complete': 'file'},
\ 'perl': {'bar': 0},
\ 'perldo': {'bar': 0},
\ 'pop': {'bar': 1},
\ 'popup': {'bar': 1},
\ 'ppop': {'bar': 1},
\ 'preserve': {'bar': 1},
\ 'previous': {'bar': 1},
\ 'print': {'bar': 1},
\ 'profdel': {'bar': 1},
\ 'profile': {'bar': 1},
\ 'promptfind': {'bar': 0},
\ 'promptrepl': {'bar': 0},
\ 'psearch': {'bar': 1},
\ 'ptNext': {'bar': 1},
\ 'ptag': {'bar': 1},
\ 'ptfirst': {'bar': 1},
\ 'ptjump': {'bar': 1},
\ 'ptlast': {'bar': 1},
\ 'ptnext': {'bar': 1},
\ 'ptprevious': {'bar': 1},
\ 'ptrewind': {'bar': 1},
\ 'ptselect': {'bar': 1},
\ 'put': {'bar': 1},
\ 'pwd': {'bar': 1},
\ 'py3': {'bar': 1},
\ 'py3do': {'bar': 1},
\ 'py3file': {'bar': 1},
\ 'pydo': {'bar': 1},
\ 'pyfile': {'bar': 0},
\ 'python': {'bar': 0},
\ 'python3': {'bar': 1},
\ 'qall': {'bar': 1},
\ 'quit': {'bar': 1},
\ 'quitall': {'bar': 1},
\ 'read': {'bar': 1},
\ 'recover': {'bar': 1},
\ 'redir': {'bar': 1},
\ 'redo': {'bar': 1},
\ 'redraw': {'bar': 1},
\ 'redrawstatus': {'bar': 1},
\ 'registers': {'bar': 0},
\ 'resize': {'bar': 1},
\ 'retab': {'bar': 1},
\ 'return': {'bar': 1},
\ 'rewind': {'bar': 1},
\ 'right': {'bar': 1},
\ 'rightbelow': {'bar': 1},
\ 'ruby': {'bar': 1},
\ 'rubydo': {'bar': 1},
\ 'rubyfile': {'bar': 1},
\ 'rundo': {'bar': 1},
\ 'runtime': {'bar': 1},
\ 'rviminfo': {'bar': 1},
\ 'sNext': {'bar': 1},
\ 'sall': {'bar': 1},
\ 'sandbox': {'bar': 1},
\ 'sargument': {'bar': 1},
\ 'saveas': {'bar': 1},
\ 'sbNext': {'bar': 1},
\ 'sball': {'bar': 1},
\ 'sbfirst': {'bar': 1},
\ 'sblast': {'bar': 1},
\ 'sbmodified': {'bar': 1},
\ 'sbnext': {'bar': 1},
\ 'sbprevious': {'bar': 1},
\ 'sbrewind': {'bar': 1},
\ 'sbuffer': {'bar': 1},
\ 'scriptencoding': {'bar': 1},
\ 'scriptnames': {'bar': 1},
\ 'scscope': {'bar': 0},
\ 'set': {'bar': 1, 'complete': 'option'},
\ 'setfiletype': {'bar': 1, 'complete': 'filetype'},
\ 'setglobal': {'bar': 1},
\ 'setlocal': {'bar': 1, 'complete': 'option'},
\ 'sfind': {'bar': 1},
\ 'sfirst': {'bar': 1},
\ 'shell': {'bar': 1},
\ 'sign': {'bar': 0, 'complete': 'sign'},
\ 'silent': {'bar': 1, 'complete': 'command'},
\ 'simalt': {'bar': 1},
\ 'slast': {'bar': 1},
\ 'sleep': {'bar': 1, 'complete': ''},
\ 'smagic': {'bar': 1},
\ 'smap': {'bar': 1, 'complete': 'mapping'},
\ 'smapclear': {'bar': 1, 'complete': ''},
\ 'smenu': {'bar': 1},
\ 'snext': {'bar': 1},
\ 'sniff': {'bar': 1},
\ 'snomagic': {'bar': 1},
\ 'snoremap': {'bar': 1, 'complete': 'mapping'},
\ 'snoremenu': {'bar': 1},
\ 'sort': {'bar': 1},
\ 'source': {'bar': 1},
\ 'spelldump': {'bar': 1},
\ 'spellgood': {'bar': 1},
\ 'spellinfo': {'bar': 1},
\ 'spellrepall': {'bar': 1},
\ 'spellundo': {'bar': 1},
\ 'spellwrong': {'bar': 1},
\ 'split': {'bar': 1},
\ 'sprevious': {'bar': 1},
\ 'srewind': {'bar': 1},
\ 'stag': {'bar': 1},
\ 'startgreplace': {'bar': 1},
\ 'startinsert': {'bar': 1},
\ 'startreplace': {'bar': 1},
\ 'stjump': {'bar': 1},
\ 'stop': {'bar': 1},
\ 'stopinsert': {'bar': 1},
\ 'stselect': {'bar': 1},
\ 'substitute': {'bar': 1},
\ 'sunhide': {'bar': 1},
\ 'sunmap': {'bar': 1, 'complete': 'mapping'},
\ 'sunmenu': {'bar': 1},
\ 'suspend': {'bar': 1},
\ 'sview': {'bar': 1},
\ 'swapname': {'bar': 1},
\ 'syncbind': {'bar': 1},
\ 'syntax': {'bar': 1},
\ 'syntime': {'bar': 1, 'complete': 'syntime'},
\ 't': {'bar': 1},
\ 'tNext': {'bar': 1},
\ 'tab': {'bar': 1, 'complete': 'command'},
\ 'tabNext': {'bar': 1},
\ 'tabclose': {'bar': 1},
\ 'tabdo': {'bar': 1},
\ 'tabedit': {'bar': 1, 'complete': 'file'},
\ 'tabfind': {'bar': 1},
\ 'tabfirst': {'bar': 1},
\ 'tablast': {'bar': 1},
\ 'tabmove': {'bar': 1},
\ 'tabnew': {'bar': 1, 'complete': 'file'},
\ 'tabnext': {'bar': 1},
\ 'tabonly': {'bar': 1},
\ 'tabprevious': {'bar': 1},
\ 'tabrewind': {'bar': 1},
\ 'tabs': {'bar': 1},
\ 'tag': {'bar': 1},
\ 'tags': {'bar': 1},
\ 'tcl': {'bar': 0},
\ 'tcldo': {'bar': 0},
\ 'tclfile': {'bar': 0},
\ 'tearoff': {'bar': 1},
\ 'tfirst': {'bar': 1},
\ 'throw': {'bar': 1},
\ 'tjump': {'bar': 1},
\ 'tlast': {'bar': 1},
\ 'tmenu': {'bar': 1},
\ 'tnext': {'bar': 1},
\ 'topleft': {'bar': 1},
\ 'tprevious': {'bar': 1},
\ 'trewind': {'bar': 1},
\ 'try': {'bar': 1},
\ 'tselect': {'bar': 1},
\ 'tunmenu': {'bar': 1},
\ 'unabbreviate': {'bar': 1},
\ 'undo': {'bar': 1},
\ 'undojoin': {'bar': 1},
\ 'undolist': {'bar': 1},
\ 'unhide': {'bar': 1},
\ 'unlet': {'bar': 1},
\ 'unlockvar': {'bar': 1},
\ 'unmap': {'bar': 1, 'complete': 'mapping'},
\ 'unmenu': {'bar': 1},
\ 'unsilent': {'bar': 1},
\ 'update': {'bar': 1},
\ 'verbose': {'bar': 1},
\ 'version': {'bar': 1},
\ 'vertical': {'bar': 1},
\ 'vglobal': {'bar': 0},
\ 'view': {'bar': 1},
\ 'vimgrep': {'bar': 1},
\ 'vimgrepadd': {'bar': 1},
\ 'visual': {'bar': 1},
\ 'viusage': {'bar': 1},
\ 'vmap': {'bar': 1, 'complete': 'mapping'},
\ 'vmapclear': {'bar': 1, 'complete': ''},
\ 'vmenu': {'bar': 1},
\ 'vnew': {'bar': 1, 'complete': 'file'},
\ 'vnoremap': {'bar': 1, 'complete': 'mapping'},
\ 'vnoremenu': {'bar': 1},
\ 'vsplit': {'bar': 1},
\ 'vunmap': {'bar': 1, 'complete': 'mapping'},
\ 'vunmenu': {'bar': 1},
\ 'wNext': {'bar': 1},
\ 'wall': {'bar': 1},
\ 'while': {'bar': 1},
\ 'wincmd': {'bar': 1},
\ 'windo': {'bar': 0},
\ 'winpos': {'bar': 1},
\ 'winsize': {'bar': 1},
\ 'wnext': {'bar': 1},
\ 'wprevious': {'bar': 1},
\ 'wq': {'bar': 1},
\ 'wqall': {'bar': 1},
\ 'write': {'bar': 1},
\ 'wsverb': {'bar': 1},
\ 'wundo': {'bar': 1},
\ 'wviminfo': {'bar': 1},
\ 'xall': {'bar': 1},
\ 'xit': {'bar': 1},
\ 'xmap': {'bar': 1, 'complete': 'mapping'},
\ 'xmapclear': {'bar': 1, 'complete': ''},
\ 'xmenu': {'bar': 1},
\ 'xnoremap': {'bar': 1, 'complete': 'mapping'},
\ 'xnoremenu': {'bar': 1},
\ 'xunmap': {'bar': 1, 'complete': 'mapping'},
\ 'xunmenu': {'bar': 1},
\ 'yank': {'bar': 1},
\ 'z': {'bar': 1},
\ '~': {'bar': 1},
\ }

function! ccline#command#expand_alias(expr)
  return get(s:alias_dic, a:expr, a:expr)
endfunction

let s:alias_dic = {
\ 'a': 'append',
\ 'ab': 'abbreviate',
\ 'abb': 'abbreviate',
\ 'abbr': 'abbreviate',
\ 'abbre': 'abbreviate',
\ 'abbrev': 'abbreviate',
\ 'abbrevi': 'abbreviate',
\ 'abbrevia': 'abbreviate',
\ 'abbreviat': 'abbreviate',
\ 'abc': 'abclear',
\ 'abcl': 'abclear',
\ 'abcle': 'abclear',
\ 'abclea': 'abclear',
\ 'abo': 'aboveleft',
\ 'abov': 'aboveleft',
\ 'above': 'aboveleft',
\ 'abovel': 'aboveleft',
\ 'abovele': 'aboveleft',
\ 'abovelef': 'aboveleft',
\ 'al': 'all',
\ 'am': 'amenu',
\ 'ame': 'amenu',
\ 'amen': 'amenu',
\ 'an': 'anoremenu',
\ 'ano': 'anoremenu',
\ 'anor': 'anoremenu',
\ 'anore': 'anoremenu',
\ 'anorem': 'anoremenu',
\ 'anoreme': 'anoremenu',
\ 'anoremen': 'anoremenu',
\ 'ap': 'append',
\ 'app': 'append',
\ 'appe': 'append',
\ 'appen': 'append',
\ 'ar': 'args',
\ 'arg': 'args',
\ 'arga': 'argadd',
\ 'argad': 'argadd',
\ 'argd': 'argdelete',
\ 'argde': 'argdelete',
\ 'argdel': 'argdelete',
\ 'argdele': 'argdelete',
\ 'argdelet': 'argdelete',
\ 'arge': 'argedit',
\ 'arged': 'argedit',
\ 'argedi': 'argedit',
\ 'argg': 'argglobal',
\ 'arggl': 'argglobal',
\ 'argglo': 'argglobal',
\ 'argglob': 'argglobal',
\ 'arggloba': 'argglobal',
\ 'argl': 'arglocal',
\ 'arglo': 'arglocal',
\ 'argloc': 'arglocal',
\ 'argloca': 'arglocal',
\ 'argu': 'argument',
\ 'argum': 'argument',
\ 'argume': 'argument',
\ 'argumen': 'argument',
\ 'as': 'ascii',
\ 'asc': 'ascii',
\ 'asci': 'ascii',
\ 'au': 'autocmd',
\ 'aug': 'augroup',
\ 'augr': 'augroup',
\ 'augro': 'augroup',
\ 'augrou': 'augroup',
\ 'aun': 'aunmenu',
\ 'aunm': 'aunmenu',
\ 'aunme': 'aunmenu',
\ 'aunmen': 'aunmenu',
\ 'aut': 'autocmd',
\ 'auto': 'autocmd',
\ 'autoc': 'autocmd',
\ 'autocm': 'autocmd',
\ 'b': 'buffer',
\ 'bN': 'bNext',
\ 'bNe': 'bNext',
\ 'bNex': 'bNext',
\ 'ba': 'ball',
\ 'bad': 'badd',
\ 'bal': 'ball',
\ 'bd': 'bdelete',
\ 'bde': 'bdelete',
\ 'bdel': 'bdelete',
\ 'bdele': 'bdelete',
\ 'bdelet': 'bdelete',
\ 'be': 'behave',
\ 'beh': 'behave',
\ 'beha': 'behave',
\ 'behav': 'behave',
\ 'bel': 'belowright',
\ 'belo': 'belowright',
\ 'below': 'belowright',
\ 'belowr': 'belowright',
\ 'belowri': 'belowright',
\ 'belowrig': 'belowright',
\ 'belowrigh': 'belowright',
\ 'bf': 'bfirst',
\ 'bfi': 'bfirst',
\ 'bfir': 'bfirst',
\ 'bfirs': 'bfirst',
\ 'bl': 'blast',
\ 'bla': 'blast',
\ 'blas': 'blast',
\ 'bm': 'bmodified',
\ 'bmo': 'bmodified',
\ 'bmod': 'bmodified',
\ 'bmodi': 'bmodified',
\ 'bmodif': 'bmodified',
\ 'bmodifi': 'bmodified',
\ 'bmodifie': 'bmodified',
\ 'bn': 'bnext',
\ 'bne': 'bnext',
\ 'bnex': 'bnext',
\ 'bo': 'botright',
\ 'bot': 'botright',
\ 'botr': 'botright',
\ 'botri': 'botright',
\ 'botrig': 'botright',
\ 'botrigh': 'botright',
\ 'bp': 'bprevious',
\ 'bpr': 'bprevious',
\ 'bpre': 'bprevious',
\ 'bprev': 'bprevious',
\ 'bprevi': 'bprevious',
\ 'bprevio': 'bprevious',
\ 'bpreviou': 'bprevious',
\ 'br': 'brewind',
\ 'bre': 'brewind',
\ 'brea': 'break',
\ 'breaka': 'breakadd',
\ 'breakad': 'breakadd',
\ 'breakd': 'breakdel',
\ 'breakde': 'breakdel',
\ 'breakl': 'breaklist',
\ 'breakli': 'breaklist',
\ 'breaklis': 'breaklist',
\ 'brew': 'brewind',
\ 'brewi': 'brewind',
\ 'brewin': 'brewind',
\ 'bro': 'browse',
\ 'brow': 'browse',
\ 'brows': 'browse',
\ 'bu': 'buffer',
\ 'buf': 'buffer',
\ 'buff': 'buffer',
\ 'buffe': 'buffer',
\ 'bun': 'bunload',
\ 'bunl': 'bunload',
\ 'bunlo': 'bunload',
\ 'bunloa': 'bunload',
\ 'bw': 'bwipeout',
\ 'bwi': 'bwipeout',
\ 'bwip': 'bwipeout',
\ 'bwipe': 'bwipeout',
\ 'bwipeo': 'bwipeout',
\ 'bwipeou': 'bwipeout',
\ 'c': 'change',
\ 'cN': 'cNext',
\ 'cNe': 'cNext',
\ 'cNex': 'cNext',
\ 'cNf': 'cNfile',
\ 'cNfi': 'cNfile',
\ 'cNfil': 'cNfile',
\ 'ca': 'cabbrev',
\ 'cab': 'cabbrev',
\ 'cabb': 'cabbrev',
\ 'cabbr': 'cabbrev',
\ 'cabbre': 'cabbrev',
\ 'cabc': 'cabclear',
\ 'cabcl': 'cabclear',
\ 'cabcle': 'cabclear',
\ 'cabclea': 'cabclear',
\ 'cad': 'caddbuffer',
\ 'cadd': 'caddbuffer',
\ 'caddb': 'caddbuffer',
\ 'caddbu': 'caddbuffer',
\ 'caddbuf': 'caddbuffer',
\ 'caddbuff': 'caddbuffer',
\ 'caddbuffe': 'caddbuffer',
\ 'cadde': 'caddexpr',
\ 'caddex': 'caddexpr',
\ 'caddexp': 'caddexpr',
\ 'caddf': 'caddfile',
\ 'caddfi': 'caddfile',
\ 'caddfil': 'caddfile',
\ 'cal': 'call',
\ 'cat': 'catch',
\ 'catc': 'catch',
\ 'cb': 'cbuffer',
\ 'cbu': 'cbuffer',
\ 'cbuf': 'cbuffer',
\ 'cbuff': 'cbuffer',
\ 'cbuffe': 'cbuffer',
\ 'ccl': 'cclose',
\ 'cclo': 'cclose',
\ 'cclos': 'cclose',
\ 'ce': 'center',
\ 'cen': 'center',
\ 'cent': 'center',
\ 'cente': 'center',
\ 'cex': 'cexpr',
\ 'cexp': 'cexpr',
\ 'cf': 'cfile',
\ 'cfi': 'cfile',
\ 'cfil': 'cfile',
\ 'cfir': 'cfirst',
\ 'cfirs': 'cfirst',
\ 'cg': 'cgetfile',
\ 'cge': 'cgetfile',
\ 'cget': 'cgetfile',
\ 'cgetb': 'cgetbuffer',
\ 'cgetbu': 'cgetbuffer',
\ 'cgetbuf': 'cgetbuffer',
\ 'cgetbuff': 'cgetbuffer',
\ 'cgetbuffe': 'cgetbuffer',
\ 'cgete': 'cgetexpr',
\ 'cgetex': 'cgetexpr',
\ 'cgetexp': 'cgetexpr',
\ 'cgetf': 'cgetfile',
\ 'cgetfi': 'cgetfile',
\ 'cgetfil': 'cgetfile',
\ 'ch': 'change',
\ 'cha': 'change',
\ 'chan': 'change',
\ 'chang': 'change',
\ 'chd': 'chdir',
\ 'chdi': 'chdir',
\ 'che': 'checkpath',
\ 'chec': 'checkpath',
\ 'check': 'checkpath',
\ 'checkp': 'checkpath',
\ 'checkpa': 'checkpath',
\ 'checkpat': 'checkpath',
\ 'checkt': 'checktime',
\ 'checkti': 'checktime',
\ 'checktim': 'checktime',
\ 'cl': 'clist',
\ 'cla': 'clast',
\ 'clas': 'clast',
\ 'cli': 'clist',
\ 'clis': 'clist',
\ 'clo': 'close',
\ 'clos': 'close',
\ 'cm': 'cmap',
\ 'cma': 'cmap',
\ 'cmapc': 'cmapclear',
\ 'cmapcl': 'cmapclear',
\ 'cmapcle': 'cmapclear',
\ 'cmapclea': 'cmapclear',
\ 'cme': 'cmenu',
\ 'cmen': 'cmenu',
\ 'cn': 'cnext',
\ 'cne': 'cnext',
\ 'cnew': 'cnewer',
\ 'cnewe': 'cnewer',
\ 'cnex': 'cnext',
\ 'cnf': 'cnfile',
\ 'cnfi': 'cnfile',
\ 'cnfil': 'cnfile',
\ 'cno': 'cnoremap',
\ 'cnor': 'cnoremap',
\ 'cnore': 'cnoremap',
\ 'cnorea': 'cnoreabbrev',
\ 'cnoreab': 'cnoreabbrev',
\ 'cnoreabb': 'cnoreabbrev',
\ 'cnoreabbr': 'cnoreabbrev',
\ 'cnoreabbre': 'cnoreabbrev',
\ 'cnorem': 'cnoremap',
\ 'cnorema': 'cnoremap',
\ 'cnoreme': 'cnoremenu',
\ 'cnoremen': 'cnoremenu',
\ 'co': 'copy',
\ 'col': 'colder',
\ 'cold': 'colder',
\ 'colde': 'colder',
\ 'colo': 'colorscheme',
\ 'color': 'colorscheme',
\ 'colors': 'colorscheme',
\ 'colorsc': 'colorscheme',
\ 'colorsch': 'colorscheme',
\ 'colorsche': 'colorscheme',
\ 'colorschem': 'colorscheme',
\ 'com': 'command',
\ 'comc': 'comclear',
\ 'comcl': 'comclear',
\ 'comcle': 'comclear',
\ 'comclea': 'comclear',
\ 'comm': 'command',
\ 'comma': 'command',
\ 'comman': 'command',
\ 'comp': 'compiler',
\ 'compi': 'compiler',
\ 'compil': 'compiler',
\ 'compile': 'compiler',
\ 'con': 'continue',
\ 'conf': 'confirm',
\ 'confi': 'confirm',
\ 'confir': 'confirm',
\ 'cont': 'continue',
\ 'conti': 'continue',
\ 'contin': 'continue',
\ 'continu': 'continue',
\ 'cop': 'copy',
\ 'cope': 'copen',
\ 'cp': 'cprevious',
\ 'cpf': 'cpfile',
\ 'cpfi': 'cpfile',
\ 'cpfil': 'cpfile',
\ 'cpr': 'cprevious',
\ 'cpre': 'cprevious',
\ 'cprev': 'cprevious',
\ 'cprevi': 'cprevious',
\ 'cprevio': 'cprevious',
\ 'cpreviou': 'cprevious',
\ 'cq': 'cquit',
\ 'cqu': 'cquit',
\ 'cqui': 'cquit',
\ 'cr': 'crewind',
\ 'cre': 'crewind',
\ 'crew': 'crewind',
\ 'crewi': 'crewind',
\ 'crewin': 'crewind',
\ 'cs': 'cscope',
\ 'csc': 'cscope',
\ 'csco': 'cscope',
\ 'cscop': 'cscope',
\ 'cst': 'cstag',
\ 'csta': 'cstag',
\ 'cu': 'cunmap',
\ 'cun': 'cunmap',
\ 'cuna': 'cunabbrev',
\ 'cunab': 'cunabbrev',
\ 'cunabb': 'cunabbrev',
\ 'cunabbr': 'cunabbrev',
\ 'cunabbre': 'cunabbrev',
\ 'cunm': 'cunmap',
\ 'cunma': 'cunmap',
\ 'cunme': 'cunmenu',
\ 'cunmen': 'cunmenu',
\ 'cw': 'cwindow',
\ 'cwi': 'cwindow',
\ 'cwin': 'cwindow',
\ 'cwind': 'cwindow',
\ 'cwindo': 'cwindow',
\ 'd': 'delete',
\ 'de': 'delete',
\ 'deb': 'debug',
\ 'debu': 'debug',
\ 'debugg': 'debuggreedy',
\ 'debuggr': 'debuggreedy',
\ 'debuggre': 'debuggreedy',
\ 'debuggree': 'debuggreedy',
\ 'debuggreed': 'debuggreedy',
\ 'del': 'delete',
\ 'delc': 'delcommand',
\ 'delco': 'delcommand',
\ 'delcom': 'delcommand',
\ 'delcomm': 'delcommand',
\ 'delcomma': 'delcommand',
\ 'delcomman': 'delcommand',
\ 'dele': 'delete',
\ 'delet': 'delete',
\ 'delf': 'delfunction',
\ 'delfu': 'delfunction',
\ 'delfun': 'delfunction',
\ 'delfunc': 'delfunction',
\ 'delfunct': 'delfunction',
\ 'delfuncti': 'delfunction',
\ 'delfunctio': 'delfunction',
\ 'delm': 'delmarks',
\ 'delma': 'delmarks',
\ 'delmar': 'delmarks',
\ 'delmark': 'delmarks',
\ 'di': 'display',
\ 'dif': 'diffupdate',
\ 'diff': 'diffupdate',
\ 'diffg': 'diffget',
\ 'diffge': 'diffget',
\ 'diffo': 'diffoff',
\ 'diffof': 'diffoff',
\ 'diffp': 'diffpatch',
\ 'diffpa': 'diffpatch',
\ 'diffpat': 'diffpatch',
\ 'diffpatc': 'diffpatch',
\ 'diffpu': 'diffput',
\ 'diffs': 'diffsplit',
\ 'diffsp': 'diffsplit',
\ 'diffspl': 'diffsplit',
\ 'diffspli': 'diffsplit',
\ 'diffu': 'diffupdate',
\ 'diffup': 'diffupdate',
\ 'diffupd': 'diffupdate',
\ 'diffupda': 'diffupdate',
\ 'diffupdat': 'diffupdate',
\ 'dig': 'digraphs',
\ 'digr': 'digraphs',
\ 'digra': 'digraphs',
\ 'digrap': 'digraphs',
\ 'digraph': 'digraphs',
\ 'dis': 'display',
\ 'disp': 'display',
\ 'displ': 'display',
\ 'displa': 'display',
\ 'dj': 'djump',
\ 'dju': 'djump',
\ 'djum': 'djump',
\ 'dli': 'dlist',
\ 'dlis': 'dlist',
\ 'do': 'doautocmd',
\ 'doa': 'doautocmd',
\ 'doau': 'doautocmd',
\ 'doaut': 'doautocmd',
\ 'doauto': 'doautocmd',
\ 'doautoa': 'doautoall',
\ 'doautoal': 'doautoall',
\ 'doautoc': 'doautocmd',
\ 'doautocm': 'doautocmd',
\ 'dr': 'drop',
\ 'dro': 'drop',
\ 'ds': 'dsearch',
\ 'dse': 'dsearch',
\ 'dsea': 'dsearch',
\ 'dsear': 'dsearch',
\ 'dsearc': 'dsearch',
\ 'dsp': 'dsplit',
\ 'dspl': 'dsplit',
\ 'dspli': 'dsplit',
\ 'e': 'edit',
\ 'ea': 'earlier',
\ 'ear': 'earlier',
\ 'earl': 'earlier',
\ 'earli': 'earlier',
\ 'earlie': 'earlier',
\ 'ec': 'echo',
\ 'ech': 'echo',
\ 'echoe': 'echoerr',
\ 'echoer': 'echoerr',
\ 'echoh': 'echohl',
\ 'echom': 'echomsg',
\ 'echoms': 'echomsg',
\ 'ed': 'edit',
\ 'edi': 'edit',
\ 'el': 'else',
\ 'els': 'else',
\ 'elsei': 'elseif',
\ 'em': 'emenu',
\ 'eme': 'emenu',
\ 'emen': 'emenu',
\ 'en': 'endif',
\ 'end': 'endif',
\ 'endf': 'endfunction',
\ 'endfo': 'endfor',
\ 'endfu': 'endfunction',
\ 'endfun': 'endfunction',
\ 'endfunc': 'endfunction',
\ 'endfunct': 'endfunction',
\ 'endfuncti': 'endfunction',
\ 'endfunctio': 'endfunction',
\ 'endi': 'endif',
\ 'endt': 'endtry',
\ 'endtr': 'endtry',
\ 'endw': 'endwhile',
\ 'endwh': 'endwhile',
\ 'endwhi': 'endwhile',
\ 'endwhil': 'endwhile',
\ 'ene': 'enew',
\ 'exe': 'execute',
\ 'exec': 'execute',
\ 'execu': 'execute',
\ 'execut': 'execute',
\ 'exi': 'exit',
\ 'exu': 'exusage',
\ 'exus': 'exusage',
\ 'exusa': 'exusage',
\ 'exusag': 'exusage',
\ 'f': 'file',
\ 'fi': 'file',
\ 'fil': 'file',
\ 'filet': 'filetype',
\ 'filety': 'filetype',
\ 'filetyp': 'filetype',
\ 'fin': 'find',
\ 'fina': 'finally',
\ 'final': 'finally',
\ 'finall': 'finally',
\ 'fini': 'finish',
\ 'finis': 'finish',
\ 'fir': 'first',
\ 'firs': 'first',
\ 'fix': 'fixdel',
\ 'fixd': 'fixdel',
\ 'fixde': 'fixdel',
\ 'fo': 'fold',
\ 'fol': 'fold',
\ 'foldc': 'foldclose',
\ 'foldcl': 'foldclose',
\ 'foldclo': 'foldclose',
\ 'foldclos': 'foldclose',
\ 'foldd': 'folddoopen',
\ 'folddo': 'folddoopen',
\ 'folddoc': 'folddoclosed',
\ 'folddocl': 'folddoclosed',
\ 'folddoclo': 'folddoclosed',
\ 'folddoclos': 'folddoclosed',
\ 'folddoclose': 'folddoclosed',
\ 'folddoo': 'folddoopen',
\ 'folddoop': 'folddoopen',
\ 'folddoope': 'folddoopen',
\ 'foldo': 'foldopen',
\ 'foldop': 'foldopen',
\ 'foldope': 'foldopen',
\ 'fu': 'function',
\ 'fun': 'function',
\ 'func': 'function',
\ 'funct': 'function',
\ 'functi': 'function',
\ 'functio': 'function',
\ 'g': 'global',
\ 'gl': 'global',
\ 'glo': 'global',
\ 'glob': 'global',
\ 'globa': 'global',
\ 'go': 'goto',
\ 'got': 'goto',
\ 'gr': 'grep',
\ 'gre': 'grep',
\ 'grepa': 'grepadd',
\ 'grepad': 'grepadd',
\ 'gu': 'gui',
\ 'gv': 'gvim',
\ 'gvi': 'gvim',
\ 'h': 'help',
\ 'ha': 'hardcopy',
\ 'har': 'hardcopy',
\ 'hard': 'hardcopy',
\ 'hardc': 'hardcopy',
\ 'hardco': 'hardcopy',
\ 'hardcop': 'hardcopy',
\ 'he': 'help',
\ 'hel': 'help',
\ 'helpf': 'helpfind',
\ 'helpfi': 'helpfind',
\ 'helpfin': 'helpfind',
\ 'helpg': 'helpgrep',
\ 'helpgr': 'helpgrep',
\ 'helpgre': 'helpgrep',
\ 'helpt': 'helptags',
\ 'helpta': 'helptags',
\ 'helptag': 'helptags',
\ 'hi': 'highlight',
\ 'hid': 'hide',
\ 'hig': 'highlight',
\ 'high': 'highlight',
\ 'highl': 'highlight',
\ 'highli': 'highlight',
\ 'highlig': 'highlight',
\ 'highligh': 'highlight',
\ 'his': 'history',
\ 'hist': 'history',
\ 'histo': 'history',
\ 'histor': 'history',
\ 'i': 'insert',
\ 'ia': 'iabbrev',
\ 'iab': 'iabbrev',
\ 'iabb': 'iabbrev',
\ 'iabbr': 'iabbrev',
\ 'iabbre': 'iabbrev',
\ 'iabc': 'iabclear',
\ 'iabcl': 'iabclear',
\ 'iabcle': 'iabclear',
\ 'iabclea': 'iabclear',
\ 'ij': 'ijump',
\ 'iju': 'ijump',
\ 'ijum': 'ijump',
\ 'il': 'ilist',
\ 'ili': 'ilist',
\ 'ilis': 'ilist',
\ 'im': 'imap',
\ 'ima': 'imap',
\ 'imapc': 'imapclear',
\ 'imapcl': 'imapclear',
\ 'imapcle': 'imapclear',
\ 'imapclea': 'imapclear',
\ 'ime': 'imenu',
\ 'imen': 'imenu',
\ 'in': 'insert',
\ 'ino': 'inoremap',
\ 'inor': 'inoremap',
\ 'inore': 'inoremap',
\ 'inorea': 'inoreabbrev',
\ 'inoreab': 'inoreabbrev',
\ 'inoreabb': 'inoreabbrev',
\ 'inoreabbr': 'inoreabbrev',
\ 'inoreabbre': 'inoreabbrev',
\ 'inorem': 'inoremap',
\ 'inorema': 'inoremap',
\ 'inoreme': 'inoremenu',
\ 'inoremen': 'inoremenu',
\ 'ins': 'insert',
\ 'inse': 'insert',
\ 'inser': 'insert',
\ 'int': 'intro',
\ 'intr': 'intro',
\ 'is': 'isearch',
\ 'ise': 'isearch',
\ 'isea': 'isearch',
\ 'isear': 'isearch',
\ 'isearc': 'isearch',
\ 'isp': 'isplit',
\ 'ispl': 'isplit',
\ 'ispli': 'isplit',
\ 'iu': 'iunmap',
\ 'iun': 'iunmap',
\ 'iuna': 'iunabbrev',
\ 'iunab': 'iunabbrev',
\ 'iunabb': 'iunabbrev',
\ 'iunabbr': 'iunabbrev',
\ 'iunabbre': 'iunabbrev',
\ 'iunm': 'iunmap',
\ 'iunma': 'iunmap',
\ 'iunme': 'iunmenu',
\ 'iunmen': 'iunmenu',
\ 'j': 'join',
\ 'jo': 'join',
\ 'joi': 'join',
\ 'ju': 'jumps',
\ 'jum': 'jumps',
\ 'jump': 'jumps',
\ 'kee': 'keepmarks',
\ 'keep': 'keepmarks',
\ 'keepa': 'keepalt',
\ 'keepal': 'keepalt',
\ 'keepj': 'keepjumps',
\ 'keepju': 'keepjumps',
\ 'keepjum': 'keepjumps',
\ 'keepjump': 'keepjumps',
\ 'keepm': 'keepmarks',
\ 'keepma': 'keepmarks',
\ 'keepmar': 'keepmarks',
\ 'keepmark': 'keepmarks',
\ 'l': 'list',
\ 'lN': 'lNext',
\ 'lNe': 'lNext',
\ 'lNex': 'lNext',
\ 'lNf': 'lNfile',
\ 'lNfi': 'lNfile',
\ 'lNfil': 'lNfile',
\ 'la': 'last',
\ 'lad': 'laddexpr',
\ 'ladd': 'laddexpr',
\ 'laddb': 'laddbuffer',
\ 'laddbu': 'laddbuffer',
\ 'laddbuf': 'laddbuffer',
\ 'laddbuff': 'laddbuffer',
\ 'laddbuffe': 'laddbuffer',
\ 'ladde': 'laddexpr',
\ 'laddex': 'laddexpr',
\ 'laddexp': 'laddexpr',
\ 'laddf': 'laddfile',
\ 'laddfi': 'laddfile',
\ 'laddfil': 'laddfile',
\ 'lan': 'language',
\ 'lang': 'language',
\ 'langu': 'language',
\ 'langua': 'language',
\ 'languag': 'language',
\ 'las': 'last',
\ 'lat': 'later',
\ 'late': 'later',
\ 'lb': 'lbuffer',
\ 'lbu': 'lbuffer',
\ 'lbuf': 'lbuffer',
\ 'lbuff': 'lbuffer',
\ 'lbuffe': 'lbuffer',
\ 'lc': 'lcd',
\ 'lch': 'lchdir',
\ 'lchd': 'lchdir',
\ 'lchdi': 'lchdir',
\ 'lcl': 'lclose',
\ 'lclo': 'lclose',
\ 'lclos': 'lclose',
\ 'le': 'left',
\ 'lef': 'left',
\ 'lefta': 'leftabove',
\ 'leftab': 'leftabove',
\ 'leftabo': 'leftabove',
\ 'leftabov': 'leftabove',
\ 'lex': 'lexpr',
\ 'lexp': 'lexpr',
\ 'lf': 'lfile',
\ 'lfi': 'lfile',
\ 'lfil': 'lfile',
\ 'lfir': 'lfirst',
\ 'lfirs': 'lfirst',
\ 'lg': 'lgetfile',
\ 'lge': 'lgetfile',
\ 'lget': 'lgetfile',
\ 'lgetb': 'lgetbuffer',
\ 'lgetbu': 'lgetbuffer',
\ 'lgetbuf': 'lgetbuffer',
\ 'lgetbuff': 'lgetbuffer',
\ 'lgetbuffe': 'lgetbuffer',
\ 'lgete': 'lgetexpr',
\ 'lgetex': 'lgetexpr',
\ 'lgetexp': 'lgetexpr',
\ 'lgetf': 'lgetfile',
\ 'lgetfi': 'lgetfile',
\ 'lgetfil': 'lgetfile',
\ 'lgr': 'lgrep',
\ 'lgre': 'lgrep',
\ 'lgrepa': 'lgrepadd',
\ 'lgrepad': 'lgrepadd',
\ 'lh': 'lhelpgrep',
\ 'lhe': 'lhelpgrep',
\ 'lhel': 'lhelpgrep',
\ 'lhelp': 'lhelpgrep',
\ 'lhelpg': 'lhelpgrep',
\ 'lhelpgr': 'lhelpgrep',
\ 'lhelpgre': 'lhelpgrep',
\ 'li': 'list',
\ 'lis': 'list',
\ 'lla': 'llast',
\ 'llas': 'llast',
\ 'lli': 'llist',
\ 'llis': 'llist',
\ 'lm': 'lmap',
\ 'lma': 'lmap',
\ 'lmak': 'lmake',
\ 'lmapc': 'lmapclear',
\ 'lmapcl': 'lmapclear',
\ 'lmapcle': 'lmapclear',
\ 'lmapclea': 'lmapclear',
\ 'ln': 'lnoremap',
\ 'lne': 'lnext',
\ 'lnew': 'lnewer',
\ 'lnewe': 'lnewer',
\ 'lnex': 'lnext',
\ 'lnf': 'lnfile',
\ 'lnfi': 'lnfile',
\ 'lnfil': 'lnfile',
\ 'lno': 'lnoremap',
\ 'lnor': 'lnoremap',
\ 'lnore': 'lnoremap',
\ 'lnorem': 'lnoremap',
\ 'lnorema': 'lnoremap',
\ 'lo': 'loadview',
\ 'loa': 'loadview',
\ 'load': 'loadview',
\ 'loadk': 'loadkeymap',
\ 'loadke': 'loadkeymap',
\ 'loadkey': 'loadkeymap',
\ 'loadkeym': 'loadkeymap',
\ 'loadkeyma': 'loadkeymap',
\ 'loadv': 'loadview',
\ 'loadvi': 'loadview',
\ 'loadvie': 'loadview',
\ 'loc': 'lockmarks',
\ 'lock': 'lockmarks',
\ 'lockm': 'lockmarks',
\ 'lockma': 'lockmarks',
\ 'lockmar': 'lockmarks',
\ 'lockmark': 'lockmarks',
\ 'lockv': 'lockvar',
\ 'lockva': 'lockvar',
\ 'lol': 'lolder',
\ 'lold': 'lolder',
\ 'lolde': 'lolder',
\ 'lope': 'lopen',
\ 'lp': 'lprevious',
\ 'lpf': 'lpfile',
\ 'lpfi': 'lpfile',
\ 'lpfil': 'lpfile',
\ 'lpr': 'lprevious',
\ 'lpre': 'lprevious',
\ 'lprev': 'lprevious',
\ 'lprevi': 'lprevious',
\ 'lprevio': 'lprevious',
\ 'lpreviou': 'lprevious',
\ 'lr': 'lrewind',
\ 'lre': 'lrewind',
\ 'lrew': 'lrewind',
\ 'lrewi': 'lrewind',
\ 'lrewin': 'lrewind',
\ 'lt': 'ltag',
\ 'lta': 'ltag',
\ 'lu': 'lunmap',
\ 'luad': 'luado',
\ 'luaf': 'luafile',
\ 'luafi': 'luafile',
\ 'luafil': 'luafile',
\ 'lun': 'lunmap',
\ 'lunm': 'lunmap',
\ 'lunma': 'lunmap',
\ 'lv': 'lvimgrep',
\ 'lvi': 'lvimgrep',
\ 'lvim': 'lvimgrep',
\ 'lvimg': 'lvimgrep',
\ 'lvimgr': 'lvimgrep',
\ 'lvimgre': 'lvimgrep',
\ 'lvimgrepa': 'lvimgrepadd',
\ 'lvimgrepad': 'lvimgrepadd',
\ 'lw': 'lwindow',
\ 'lwi': 'lwindow',
\ 'lwin': 'lwindow',
\ 'lwind': 'lwindow',
\ 'lwindo': 'lwindow',
\ 'm': 'move',
\ 'ma': 'mark',
\ 'mak': 'make',
\ 'mapc': 'mapclear',
\ 'mapcl': 'mapclear',
\ 'mapcle': 'mapclear',
\ 'mapclea': 'mapclear',
\ 'mar': 'mark',
\ 'mat': 'match',
\ 'matc': 'match',
\ 'me': 'menu',
\ 'men': 'menu',
\ 'menut': 'menutranslate',
\ 'menutr': 'menutranslate',
\ 'menutra': 'menutranslate',
\ 'menutran': 'menutranslate',
\ 'menutrans': 'menutranslate',
\ 'menutransl': 'menutranslate',
\ 'menutransla': 'menutranslate',
\ 'menutranslat': 'menutranslate',
\ 'mes': 'messages',
\ 'mess': 'messages',
\ 'messa': 'messages',
\ 'messag': 'messages',
\ 'message': 'messages',
\ 'mk': 'mkexrc',
\ 'mke': 'mkexrc',
\ 'mkex': 'mkexrc',
\ 'mkexr': 'mkexrc',
\ 'mks': 'mksession',
\ 'mkse': 'mksession',
\ 'mkses': 'mksession',
\ 'mksess': 'mksession',
\ 'mksessi': 'mksession',
\ 'mksessio': 'mksession',
\ 'mksp': 'mkspell',
\ 'mkspe': 'mkspell',
\ 'mkspel': 'mkspell',
\ 'mkv': 'mkvimrc',
\ 'mkvi': 'mkvimrc',
\ 'mkvie': 'mkview',
\ 'mkvim': 'mkvimrc',
\ 'mkvimr': 'mkvimrc',
\ 'mo': 'move',
\ 'mod': 'mode',
\ 'mov': 'move',
\ 'mz': 'mzscheme',
\ 'mzf': 'mzfile',
\ 'mzfi': 'mzfile',
\ 'mzfil': 'mzfile',
\ 'mzs': 'mzscheme',
\ 'mzsc': 'mzscheme',
\ 'mzsch': 'mzscheme',
\ 'mzsche': 'mzscheme',
\ 'mzschem': 'mzscheme',
\ 'n': 'next',
\ 'nb': 'nbkey',
\ 'nbc': 'nbclose',
\ 'nbcl': 'nbclose',
\ 'nbclo': 'nbclose',
\ 'nbclos': 'nbclose',
\ 'nbk': 'nbkey',
\ 'nbke': 'nbkey',
\ 'nbs': 'nbstart',
\ 'nbsa': 'nbstart',
\ 'nbsar': 'nbstart',
\ 'nbsart': 'nbstart',
\ 'ne': 'next',
\ 'nex': 'next',
\ 'nm': 'nmap',
\ 'nma': 'nmap',
\ 'nmapc': 'nmapclear',
\ 'nmapcl': 'nmapclear',
\ 'nmapcle': 'nmapclear',
\ 'nmapclea': 'nmapclear',
\ 'nme': 'nmenu',
\ 'nmen': 'nmenu',
\ 'nn': 'nnoremap',
\ 'nno': 'nnoremap',
\ 'nnor': 'nnoremap',
\ 'nnore': 'nnoremap',
\ 'nnorem': 'nnoremap',
\ 'nnorema': 'nnoremap',
\ 'nnoreme': 'nnoremenu',
\ 'nnoremen': 'nnoremenu',
\ 'no': 'noremap',
\ 'noa': 'noautocmd',
\ 'noau': 'noautocmd',
\ 'noaut': 'noautocmd',
\ 'noauto': 'noautocmd',
\ 'noautoc': 'noautocmd',
\ 'noautocm': 'noautocmd',
\ 'noh': 'nohlsearch',
\ 'nohl': 'nohlsearch',
\ 'nohls': 'nohlsearch',
\ 'nohlse': 'nohlsearch',
\ 'nohlsea': 'nohlsearch',
\ 'nohlsear': 'nohlsearch',
\ 'nohlsearc': 'nohlsearch',
\ 'nor': 'noremap',
\ 'nore': 'noremap',
\ 'norea': 'noreabbrev',
\ 'noreab': 'noreabbrev',
\ 'noreabb': 'noreabbrev',
\ 'noreabbr': 'noreabbrev',
\ 'noreabbre': 'noreabbrev',
\ 'norem': 'noremap',
\ 'norema': 'noremap',
\ 'noreme': 'noremenu',
\ 'noremen': 'noremenu',
\ 'norm': 'normal',
\ 'norma': 'normal',
\ 'nos': 'noswapfile',
\ 'nosw': 'noswapfile',
\ 'noswa': 'noswapfile',
\ 'noswap': 'noswapfile',
\ 'noswapf': 'noswapfile',
\ 'noswapfi': 'noswapfile',
\ 'noswapfil': 'noswapfile',
\ 'nu': 'number',
\ 'num': 'number',
\ 'numb': 'number',
\ 'numbe': 'number',
\ 'nun': 'nunmap',
\ 'nunm': 'nunmap',
\ 'nunma': 'nunmap',
\ 'nunme': 'nunmenu',
\ 'nunmen': 'nunmenu',
\ 'o': 'open',
\ 'ol': 'oldfiles',
\ 'old': 'oldfiles',
\ 'oldf': 'oldfiles',
\ 'oldfi': 'oldfiles',
\ 'oldfil': 'oldfiles',
\ 'oldfile': 'oldfiles',
\ 'om': 'omap',
\ 'oma': 'omap',
\ 'omapc': 'omapclear',
\ 'omapcl': 'omapclear',
\ 'omapcle': 'omapclear',
\ 'omapclea': 'omapclear',
\ 'ome': 'omenu',
\ 'omen': 'omenu',
\ 'on': 'only',
\ 'onl': 'only',
\ 'ono': 'onoremap',
\ 'onor': 'onoremap',
\ 'onore': 'onoremap',
\ 'onorem': 'onoremap',
\ 'onorema': 'onoremap',
\ 'onoreme': 'onoremenu',
\ 'onoremen': 'onoremenu',
\ 'op': 'open',
\ 'ope': 'open',
\ 'opt': 'options',
\ 'opti': 'options',
\ 'optio': 'options',
\ 'option': 'options',
\ 'ou': 'ounmap',
\ 'oun': 'ounmap',
\ 'ounm': 'ounmap',
\ 'ounma': 'ounmap',
\ 'ounme': 'ounmenu',
\ 'ounmen': 'ounmenu',
\ 'ow': 'ownsyntax',
\ 'own': 'ownsyntax',
\ 'owns': 'ownsyntax',
\ 'ownsy': 'ownsyntax',
\ 'ownsyn': 'ownsyntax',
\ 'ownsynt': 'ownsyntax',
\ 'ownsynta': 'ownsyntax',
\ 'p': 'print',
\ 'pc': 'pclose',
\ 'pcl': 'pclose',
\ 'pclo': 'pclose',
\ 'pclos': 'pclose',
\ 'pe': 'perl',
\ 'ped': 'pedit',
\ 'pedi': 'pedit',
\ 'per': 'perl',
\ 'perld': 'perldo',
\ 'po': 'pop',
\ 'pp': 'ppop',
\ 'ppo': 'ppop',
\ 'pr': 'print',
\ 'pre': 'preserve',
\ 'pres': 'preserve',
\ 'prese': 'preserve',
\ 'preser': 'preserve',
\ 'preserv': 'preserve',
\ 'prev': 'previous',
\ 'previ': 'previous',
\ 'previo': 'previous',
\ 'previou': 'previous',
\ 'pri': 'print',
\ 'prin': 'print',
\ 'pro': 'promptfind',
\ 'prof': 'profile',
\ 'profd': 'profdel',
\ 'profde': 'profdel',
\ 'profi': 'profile',
\ 'profil': 'profile',
\ 'prom': 'promptfind',
\ 'promp': 'promptfind',
\ 'prompt': 'promptfind',
\ 'promptf': 'promptfind',
\ 'promptfi': 'promptfind',
\ 'promptfin': 'promptfind',
\ 'promptr': 'promptrepl',
\ 'promptre': 'promptrepl',
\ 'promptrep': 'promptrepl',
\ 'ps': 'psearch',
\ 'pse': 'psearch',
\ 'psea': 'psearch',
\ 'psear': 'psearch',
\ 'psearc': 'psearch',
\ 'pt': 'ptag',
\ 'ptN': 'ptNext',
\ 'ptNe': 'ptNext',
\ 'ptNex': 'ptNext',
\ 'pta': 'ptag',
\ 'ptf': 'ptfirst',
\ 'ptfi': 'ptfirst',
\ 'ptfir': 'ptfirst',
\ 'ptfirs': 'ptfirst',
\ 'ptj': 'ptjump',
\ 'ptju': 'ptjump',
\ 'ptjum': 'ptjump',
\ 'ptl': 'ptlast',
\ 'ptla': 'ptlast',
\ 'ptlas': 'ptlast',
\ 'ptn': 'ptnext',
\ 'ptne': 'ptnext',
\ 'ptnex': 'ptnext',
\ 'ptp': 'ptprevious',
\ 'ptpr': 'ptprevious',
\ 'ptpre': 'ptprevious',
\ 'ptprev': 'ptprevious',
\ 'ptprevi': 'ptprevious',
\ 'ptprevio': 'ptprevious',
\ 'ptpreviou': 'ptprevious',
\ 'ptr': 'ptrewind',
\ 'ptre': 'ptrewind',
\ 'ptrew': 'ptrewind',
\ 'ptrewi': 'ptrewind',
\ 'ptrewin': 'ptrewind',
\ 'pts': 'ptselect',
\ 'ptse': 'ptselect',
\ 'ptsel': 'ptselect',
\ 'ptsele': 'ptselect',
\ 'ptselec': 'ptselect',
\ 'pu': 'put',
\ 'pw': 'pwd',
\ 'py': 'python',
\ 'pyd': 'pydo',
\ 'pyf': 'pyfile',
\ 'pyfi': 'pyfile',
\ 'pyfil': 'pyfile',
\ 'pyt': 'python',
\ 'pyth': 'python',
\ 'pytho': 'python',
\ 'q': 'quit',
\ 'qa': 'qall',
\ 'qal': 'qall',
\ 'qu': 'quit',
\ 'qui': 'quit',
\ 'quita': 'quitall',
\ 'quital': 'quitall',
\ 'r': 'read',
\ 're': 'read',
\ 'rea': 'read',
\ 'rec': 'recover',
\ 'reco': 'recover',
\ 'recov': 'recover',
\ 'recove': 'recover',
\ 'red': 'redo',
\ 'redi': 'redir',
\ 'redr': 'redraw',
\ 'redra': 'redraw',
\ 'redraws': 'redrawstatus',
\ 'redrawst': 'redrawstatus',
\ 'redrawsta': 'redrawstatus',
\ 'redrawstat': 'redrawstatus',
\ 'redrawstatu': 'redrawstatus',
\ 'reg': 'registers',
\ 'regi': 'registers',
\ 'regis': 'registers',
\ 'regist': 'registers',
\ 'registe': 'registers',
\ 'register': 'registers',
\ 'res': 'resize',
\ 'resi': 'resize',
\ 'resiz': 'resize',
\ 'ret': 'retab',
\ 'reta': 'retab',
\ 'retu': 'return',
\ 'retur': 'return',
\ 'rew': 'rewind',
\ 'rewi': 'rewind',
\ 'rewin': 'rewind',
\ 'ri': 'right',
\ 'rig': 'right',
\ 'righ': 'right',
\ 'rightb': 'rightbelow',
\ 'rightbe': 'rightbelow',
\ 'rightbel': 'rightbelow',
\ 'rightbelo': 'rightbelow',
\ 'ru': 'runtime',
\ 'rub': 'ruby',
\ 'rubyd': 'rubydo',
\ 'rubyf': 'rubyfile',
\ 'rubyfi': 'rubyfile',
\ 'rubyfil': 'rubyfile',
\ 'run': 'runtime',
\ 'rund': 'rundo',
\ 'runt': 'runtime',
\ 'runti': 'runtime',
\ 'runtim': 'runtime',
\ 'rv': 'rviminfo',
\ 'rvi': 'rviminfo',
\ 'rvim': 'rviminfo',
\ 'rvimi': 'rviminfo',
\ 'rvimin': 'rviminfo',
\ 'rviminf': 'rviminfo',
\ 's': 'substitute',
\ 'sN': 'sNext',
\ 'sNe': 'sNext',
\ 'sNex': 'sNext',
\ 'sa': 'sargument',
\ 'sal': 'sall',
\ 'san': 'sandbox',
\ 'sand': 'sandbox',
\ 'sandb': 'sandbox',
\ 'sandbo': 'sandbox',
\ 'sar': 'sargument',
\ 'sarg': 'sargument',
\ 'sargu': 'sargument',
\ 'sargum': 'sargument',
\ 'sargume': 'sargument',
\ 'sargumen': 'sargument',
\ 'sav': 'saveas',
\ 'save': 'saveas',
\ 'savea': 'saveas',
\ 'sb': 'sbuffer',
\ 'sbN': 'sbNext',
\ 'sbNe': 'sbNext',
\ 'sbNex': 'sbNext',
\ 'sba': 'sball',
\ 'sbal': 'sball',
\ 'sbf': 'sbfirst',
\ 'sbfi': 'sbfirst',
\ 'sbfir': 'sbfirst',
\ 'sbfirs': 'sbfirst',
\ 'sbl': 'sblast',
\ 'sbla': 'sblast',
\ 'sblas': 'sblast',
\ 'sbm': 'sbmodified',
\ 'sbmo': 'sbmodified',
\ 'sbmod': 'sbmodified',
\ 'sbmodi': 'sbmodified',
\ 'sbmodif': 'sbmodified',
\ 'sbmodifi': 'sbmodified',
\ 'sbmodifie': 'sbmodified',
\ 'sbn': 'sbnext',
\ 'sbne': 'sbnext',
\ 'sbnex': 'sbnext',
\ 'sbp': 'sbprevious',
\ 'sbpr': 'sbprevious',
\ 'sbpre': 'sbprevious',
\ 'sbprev': 'sbprevious',
\ 'sbprevi': 'sbprevious',
\ 'sbprevio': 'sbprevious',
\ 'sbpreviou': 'sbprevious',
\ 'sbr': 'sbrewind',
\ 'sbre': 'sbrewind',
\ 'sbrew': 'sbrewind',
\ 'sbrewi': 'sbrewind',
\ 'sbrewin': 'sbrewind',
\ 'sbu': 'sbuffer',
\ 'sbuf': 'sbuffer',
\ 'sbuff': 'sbuffer',
\ 'sbuffe': 'sbuffer',
\ 'scrip': 'scriptnames',
\ 'script': 'scriptnames',
\ 'scripte': 'scriptencoding',
\ 'scripten': 'scriptencoding',
\ 'scriptenc': 'scriptencoding',
\ 'scriptenco': 'scriptencoding',
\ 'scriptencod': 'scriptencoding',
\ 'scriptencodi': 'scriptencoding',
\ 'scriptencodin': 'scriptencoding',
\ 'scriptn': 'scriptnames',
\ 'scriptna': 'scriptnames',
\ 'scriptnam': 'scriptnames',
\ 'scriptname': 'scriptnames',
\ 'scs': 'scscope',
\ 'scsc': 'scscope',
\ 'scsco': 'scscope',
\ 'scscop': 'scscope',
\ 'se': 'set',
\ 'setf': 'setfiletype',
\ 'setfi': 'setfiletype',
\ 'setfil': 'setfiletype',
\ 'setfile': 'setfiletype',
\ 'setfilet': 'setfiletype',
\ 'setfilety': 'setfiletype',
\ 'setfiletyp': 'setfiletype',
\ 'setg': 'setglobal',
\ 'setgl': 'setglobal',
\ 'setglo': 'setglobal',
\ 'setglob': 'setglobal',
\ 'setgloba': 'setglobal',
\ 'setl': 'setlocal',
\ 'setlo': 'setlocal',
\ 'setloc': 'setlocal',
\ 'setloca': 'setlocal',
\ 'sf': 'sfind',
\ 'sfi': 'sfind',
\ 'sfin': 'sfind',
\ 'sfir': 'sfirst',
\ 'sfirs': 'sfirst',
\ 'sh': 'shell',
\ 'she': 'shell',
\ 'shel': 'shell',
\ 'si': 'simalt',
\ 'sig': 'sign',
\ 'sil': 'silent',
\ 'sile': 'silent',
\ 'silen': 'silent',
\ 'sim': 'simalt',
\ 'sima': 'simalt',
\ 'simal': 'simalt',
\ 'sl': 'sleep',
\ 'sla': 'slast',
\ 'slas': 'slast',
\ 'sle': 'sleep',
\ 'slee': 'sleep',
\ 'sm': 'smagic',
\ 'sma': 'smagic',
\ 'smag': 'smagic',
\ 'smagi': 'smagic',
\ 'smapc': 'smapclear',
\ 'smapcl': 'smapclear',
\ 'smapcle': 'smapclear',
\ 'smapclea': 'smapclear',
\ 'sme': 'smenu',
\ 'smen': 'smenu',
\ 'sn': 'snext',
\ 'sne': 'snext',
\ 'snex': 'snext',
\ 'sni': 'sniff',
\ 'snif': 'sniff',
\ 'sno': 'snomagic',
\ 'snom': 'snomagic',
\ 'snoma': 'snomagic',
\ 'snomag': 'snomagic',
\ 'snomagi': 'snomagic',
\ 'snor': 'snoremap',
\ 'snore': 'snoremap',
\ 'snorem': 'snoremap',
\ 'snorema': 'snoremap',
\ 'snoreme': 'snoremenu',
\ 'snoremen': 'snoremenu',
\ 'so': 'source',
\ 'sor': 'sort',
\ 'sou': 'source',
\ 'sour': 'source',
\ 'sourc': 'source',
\ 'sp': 'split',
\ 'spe': 'spellgood',
\ 'spel': 'spellgood',
\ 'spell': 'spellgood',
\ 'spelld': 'spelldump',
\ 'spelldu': 'spelldump',
\ 'spelldum': 'spelldump',
\ 'spellg': 'spellgood',
\ 'spellgo': 'spellgood',
\ 'spellgoo': 'spellgood',
\ 'spelli': 'spellinfo',
\ 'spellin': 'spellinfo',
\ 'spellinf': 'spellinfo',
\ 'spellr': 'spellrepall',
\ 'spellre': 'spellrepall',
\ 'spellrep': 'spellrepall',
\ 'spellrepa': 'spellrepall',
\ 'spellrepal': 'spellrepall',
\ 'spellu': 'spellundo',
\ 'spellun': 'spellundo',
\ 'spellund': 'spellundo',
\ 'spellw': 'spellwrong',
\ 'spellwr': 'spellwrong',
\ 'spellwro': 'spellwrong',
\ 'spellwron': 'spellwrong',
\ 'spl': 'split',
\ 'spli': 'split',
\ 'spr': 'sprevious',
\ 'spre': 'sprevious',
\ 'sprev': 'sprevious',
\ 'sprevi': 'sprevious',
\ 'sprevio': 'sprevious',
\ 'spreviou': 'sprevious',
\ 'sre': 'srewind',
\ 'srew': 'srewind',
\ 'srewi': 'srewind',
\ 'srewin': 'srewind',
\ 'st': 'stop',
\ 'sta': 'stag',
\ 'star': 'startinsert',
\ 'start': 'startinsert',
\ 'startg': 'startgreplace',
\ 'startgr': 'startgreplace',
\ 'startgre': 'startgreplace',
\ 'startgrep': 'startgreplace',
\ 'startgrepl': 'startgreplace',
\ 'startgrepla': 'startgreplace',
\ 'startgreplac': 'startgreplace',
\ 'starti': 'startinsert',
\ 'startin': 'startinsert',
\ 'startins': 'startinsert',
\ 'startinse': 'startinsert',
\ 'startinser': 'startinsert',
\ 'startr': 'startreplace',
\ 'startre': 'startreplace',
\ 'startrep': 'startreplace',
\ 'startrepl': 'startreplace',
\ 'startrepla': 'startreplace',
\ 'startreplac': 'startreplace',
\ 'stj': 'stjump',
\ 'stju': 'stjump',
\ 'stjum': 'stjump',
\ 'sto': 'stop',
\ 'stopi': 'stopinsert',
\ 'stopin': 'stopinsert',
\ 'stopins': 'stopinsert',
\ 'stopinse': 'stopinsert',
\ 'stopinser': 'stopinsert',
\ 'sts': 'stselect',
\ 'stse': 'stselect',
\ 'stsel': 'stselect',
\ 'stsele': 'stselect',
\ 'stselec': 'stselect',
\ 'su': 'substitute',
\ 'sub': 'substitute',
\ 'subs': 'substitute',
\ 'subst': 'substitute',
\ 'substi': 'substitute',
\ 'substit': 'substitute',
\ 'substitu': 'substitute',
\ 'substitut': 'substitute',
\ 'sun': 'sunhide',
\ 'sunh': 'sunhide',
\ 'sunhi': 'sunhide',
\ 'sunhid': 'sunhide',
\ 'sunm': 'sunmap',
\ 'sunma': 'sunmap',
\ 'sunme': 'sunmenu',
\ 'sunmen': 'sunmenu',
\ 'sus': 'suspend',
\ 'susp': 'suspend',
\ 'suspe': 'suspend',
\ 'suspen': 'suspend',
\ 'sv': 'sview',
\ 'svi': 'sview',
\ 'svie': 'sview',
\ 'sw': 'swapname',
\ 'swa': 'swapname',
\ 'swap': 'swapname',
\ 'swapn': 'swapname',
\ 'swapna': 'swapname',
\ 'swapnam': 'swapname',
\ 'sy': 'syntax',
\ 'syn': 'syntax',
\ 'sync': 'syncbind',
\ 'syncb': 'syncbind',
\ 'syncbi': 'syncbind',
\ 'syncbin': 'syncbind',
\ 'synt': 'syntax',
\ 'synta': 'syntax',
\ 'synti': 'syntime',
\ 'syntim': 'syntime',
\ 'tN': 'tNext',
\ 'tNe': 'tNext',
\ 'tNex': 'tNext',
\ 'ta': 'tag',
\ 'tabN': 'tabNext',
\ 'tabNe': 'tabNext',
\ 'tabNex': 'tabNext',
\ 'tabc': 'tabclose',
\ 'tabcl': 'tabclose',
\ 'tabclo': 'tabclose',
\ 'tabclos': 'tabclose',
\ 'tabe': 'tabedit',
\ 'tabed': 'tabedit',
\ 'tabedi': 'tabedit',
\ 'tabf': 'tabfind',
\ 'tabfi': 'tabfind',
\ 'tabfin': 'tabfind',
\ 'tabfir': 'tabfirst',
\ 'tabfirs': 'tabfirst',
\ 'tabl': 'tablast',
\ 'tabla': 'tablast',
\ 'tablas': 'tablast',
\ 'tabm': 'tabmove',
\ 'tabmo': 'tabmove',
\ 'tabmov': 'tabmove',
\ 'tabn': 'tabnext',
\ 'tabne': 'tabnext',
\ 'tabnex': 'tabnext',
\ 'tabo': 'tabonly',
\ 'tabon': 'tabonly',
\ 'tabonl': 'tabonly',
\ 'tabp': 'tabprevious',
\ 'tabpr': 'tabprevious',
\ 'tabpre': 'tabprevious',
\ 'tabprev': 'tabprevious',
\ 'tabprevi': 'tabprevious',
\ 'tabprevio': 'tabprevious',
\ 'tabpreviou': 'tabprevious',
\ 'tabr': 'tabrewind',
\ 'tabre': 'tabrewind',
\ 'tabrew': 'tabrewind',
\ 'tabrewi': 'tabrewind',
\ 'tabrewin': 'tabrewind',
\ 'tc': 'tcl',
\ 'tcld': 'tcldo',
\ 'tclf': 'tclfile',
\ 'tclfi': 'tclfile',
\ 'tclfil': 'tclfile',
\ 'te': 'tearoff',
\ 'tea': 'tearoff',
\ 'tear': 'tearoff',
\ 'tearo': 'tearoff',
\ 'tearof': 'tearoff',
\ 'tf': 'tfirst',
\ 'tfi': 'tfirst',
\ 'tfir': 'tfirst',
\ 'tfirs': 'tfirst',
\ 'th': 'throw',
\ 'thr': 'throw',
\ 'thro': 'throw',
\ 'tj': 'tjump',
\ 'tju': 'tjump',
\ 'tjum': 'tjump',
\ 'tl': 'tlast',
\ 'tla': 'tlast',
\ 'tlas': 'tlast',
\ 'tm': 'tmenu',
\ 'tme': 'tmenu',
\ 'tmen': 'tmenu',
\ 'tn': 'tnext',
\ 'tne': 'tnext',
\ 'tnex': 'tnext',
\ 'to': 'topleft',
\ 'top': 'topleft',
\ 'topl': 'topleft',
\ 'tople': 'topleft',
\ 'toplef': 'topleft',
\ 'tp': 'tprevious',
\ 'tpr': 'tprevious',
\ 'tpre': 'tprevious',
\ 'tprev': 'tprevious',
\ 'tprevi': 'tprevious',
\ 'tprevio': 'tprevious',
\ 'tpreviou': 'tprevious',
\ 'tr': 'trewind',
\ 'tre': 'trewind',
\ 'trew': 'trewind',
\ 'trewi': 'trewind',
\ 'trewin': 'trewind',
\ 'ts': 'tselect',
\ 'tse': 'tselect',
\ 'tsel': 'tselect',
\ 'tsele': 'tselect',
\ 'tselec': 'tselect',
\ 'tu': 'tunmenu',
\ 'tun': 'tunmenu',
\ 'tunm': 'tunmenu',
\ 'tunme': 'tunmenu',
\ 'tunmen': 'tunmenu',
\ 'u': 'undo',
\ 'un': 'undo',
\ 'und': 'undo',
\ 'undoj': 'undojoin',
\ 'undojo': 'undojoin',
\ 'undojoi': 'undojoin',
\ 'undol': 'undolist',
\ 'undoli': 'undolist',
\ 'undolis': 'undolist',
\ 'unh': 'unhide',
\ 'unhi': 'unhide',
\ 'unhid': 'unhide',
\ 'unl': 'unlet',
\ 'unle': 'unlet',
\ 'unlo': 'unlockvar',
\ 'unloc': 'unlockvar',
\ 'unlock': 'unlockvar',
\ 'unlockv': 'unlockvar',
\ 'unlockva': 'unlockvar',
\ 'unm': 'unmap',
\ 'unma': 'unmap',
\ 'unme': 'unmenu',
\ 'unmen': 'unmenu',
\ 'uns': 'unsilent',
\ 'unsi': 'unsilent',
\ 'unsil': 'unsilent',
\ 'unsile': 'unsilent',
\ 'unsilen': 'unsilent',
\ 'up': 'update',
\ 'upd': 'update',
\ 'upda': 'update',
\ 'updat': 'update',
\ 'v': 'vglobal',
\ 've': 'version',
\ 'ver': 'version',
\ 'verb': 'verbose',
\ 'verbo': 'verbose',
\ 'verbos': 'verbose',
\ 'vers': 'version',
\ 'versi': 'version',
\ 'versio': 'version',
\ 'vert': 'vertical',
\ 'verti': 'vertical',
\ 'vertic': 'vertical',
\ 'vertica': 'vertical',
\ 'vg': 'vglobal',
\ 'vgl': 'vglobal',
\ 'vglo': 'vglobal',
\ 'vglob': 'vglobal',
\ 'vgloba': 'vglobal',
\ 'vi': 'visual',
\ 'vie': 'view',
\ 'vim': 'vimgrep',
\ 'vimg': 'vimgrep',
\ 'vimgr': 'vimgrep',
\ 'vimgre': 'vimgrep',
\ 'vimgrepa': 'vimgrepadd',
\ 'vimgrepad': 'vimgrepadd',
\ 'vis': 'visual',
\ 'visu': 'visual',
\ 'visua': 'visual',
\ 'viu': 'viusage',
\ 'vius': 'viusage',
\ 'viusa': 'viusage',
\ 'viusag': 'viusage',
\ 'vm': 'vmap',
\ 'vma': 'vmap',
\ 'vmapc': 'vmapclear',
\ 'vmapcl': 'vmapclear',
\ 'vmapcle': 'vmapclear',
\ 'vmapclea': 'vmapclear',
\ 'vme': 'vmenu',
\ 'vmen': 'vmenu',
\ 'vn': 'vnoremap',
\ 'vne': 'vnew',
\ 'vno': 'vnoremap',
\ 'vnor': 'vnoremap',
\ 'vnore': 'vnoremap',
\ 'vnorem': 'vnoremap',
\ 'vnorema': 'vnoremap',
\ 'vnoreme': 'vnoremenu',
\ 'vnoremen': 'vnoremenu',
\ 'vs': 'vsplit',
\ 'vsp': 'vsplit',
\ 'vspl': 'vsplit',
\ 'vspli': 'vsplit',
\ 'vu': 'vunmap',
\ 'vun': 'vunmap',
\ 'vunm': 'vunmap',
\ 'vunma': 'vunmap',
\ 'vunme': 'vunmenu',
\ 'vunmen': 'vunmenu',
\ 'w': 'write',
\ 'wN': 'wNext',
\ 'wNe': 'wNext',
\ 'wNex': 'wNext',
\ 'wa': 'wall',
\ 'wal': 'wall',
\ 'wh': 'while',
\ 'whi': 'while',
\ 'whil': 'while',
\ 'wi': 'winsize',
\ 'win': 'winsize',
\ 'winc': 'wincmd',
\ 'wincm': 'wincmd',
\ 'winp': 'winpos',
\ 'winpo': 'winpos',
\ 'wins': 'winsize',
\ 'winsi': 'winsize',
\ 'winsiz': 'winsize',
\ 'wn': 'wnext',
\ 'wne': 'wnext',
\ 'wnex': 'wnext',
\ 'wp': 'wprevious',
\ 'wpr': 'wprevious',
\ 'wpre': 'wprevious',
\ 'wprev': 'wprevious',
\ 'wprevi': 'wprevious',
\ 'wprevio': 'wprevious',
\ 'wpreviou': 'wprevious',
\ 'wqa': 'wqall',
\ 'wqal': 'wqall',
\ 'wr': 'write',
\ 'wri': 'write',
\ 'writ': 'write',
\ 'ws': 'wsverb',
\ 'wsv': 'wsverb',
\ 'wsve': 'wsverb',
\ 'wsver': 'wsverb',
\ 'wu': 'wundo',
\ 'wun': 'wundo',
\ 'wund': 'wundo',
\ 'wv': 'wviminfo',
\ 'wvi': 'wviminfo',
\ 'wvim': 'wviminfo',
\ 'wvimi': 'wviminfo',
\ 'wvimin': 'wviminfo',
\ 'wviminf': 'wviminfo',
\ 'x': 'xit',
\ 'xa': 'xall',
\ 'xal': 'xall',
\ 'xi': 'xit',
\ 'xm': 'xmap',
\ 'xma': 'xmap',
\ 'xmapc': 'xmapclear',
\ 'xmapcl': 'xmapclear',
\ 'xmapcle': 'xmapclear',
\ 'xmapclea': 'xmapclear',
\ 'xme': 'xmenu',
\ 'xmen': 'xmenu',
\ 'xn': 'xnoremap',
\ 'xno': 'xnoremap',
\ 'xnor': 'xnoremap',
\ 'xnore': 'xnoremap',
\ 'xnorem': 'xnoremap',
\ 'xnorema': 'xnoremap',
\ 'xnoreme': 'xnoremenu',
\ 'xnoremen': 'xnoremenu',
\ 'xu': 'xunmap',
\ 'xun': 'xunmap',
\ 'xunm': 'xunmap',
\ 'xunma': 'xunmap',
\ 'xunme': 'xunmenu',
\ 'xunmen': 'xunmenu',
\ 'y': 'yank',
\ 'ya': 'yank',
\ 'yan': 'yank',
\ }

let &cpo = s:save_cpo
unlet s:save_cpo
