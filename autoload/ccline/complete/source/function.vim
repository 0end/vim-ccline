let s:source = {}

function! ccline#complete#source#function#define() abort
  return deepcopy(s:source)
endfunction

function! s:source.parse(cmdline) abort
  return ccline#complete#parse_by(a:cmdline.backward(), '[^([:blank:]]\+')
endfunction

function! s:source.init() abort
  let self.functions = extend(s:get_user_functions(), s:default_functions)
endfunction

function! s:source.complete(cmdline, arg, line, pos) abort
  " if match(strpart(a:cmdline.backward(), 0, strlen(a:cmdline.backward()) - strlen(a:arg)), '[([:blank:]]$') < 0
  "   return []
  " endif
  if stridx(a:arg, '<SNR>') == 0
    return sort(ccline#complete#forward_matcher(keys(self.functions), a:arg), 's:function_compare')
  endif
  return sort(ccline#complete#forward_matcher(filter(keys(self.functions), 'stridx(v:val, "<SNR>") < 0'), a:arg))
endfunction

function! s:source.insert(candidate) abort
  return a:candidate . (empty(self.functions[a:candidate]) ? '()' : '(')
endfunction

function! s:get_user_functions()
  let result = {}
  for f in split(ccline#complete#capture('function'), '[\r\n]')
    let function = strpart(f, 9)
    let name = strpart(function, 0, stridx(function, '('))
    let args = matchstr(function, '(\zs.*\ze)')
    let result[name] = args
  endfor
  return result
endfunction
function! s:parse_function_str(line)
  let args = matchstr(function, '(\zs.*\ze)')
  return  . (empty(args) ? '()' : '(')
endfunction

function! s:function_compare(str1, str2) abort
  let snr1 = matchstr(a:str1, '^<SNR>\zs\d\+\ze_') + 0
  let snr2 = matchstr(a:str2, '^<SNR>\zs\d\+\ze_') + 0
  if snr1 == snr2
    if a:str1 ==# a:str2
      return 0
    elseif a:str1 ># a:str2
      return 1
    elseif a:str1 <# a:str2
      return -1
    endif
  endif
  return snr1 - snr2
endfunction

let s:default_functions = {
\ 'abs':               'expr',
\ 'acos':              'expr',
\ 'add':               'list, item',
\ 'and':               'expr, expr',
\ 'append':            'lnum, expr',
\ 'argc':              '',
\ 'argidx':            '',
\ 'arglistid':         '[winnr,[ tabnr]]',
\ 'argv':              '[nr]',
\ 'asin':              'expr',
\ 'atan':              'expr',
\ 'atan2':             'expr, expr',
\ 'browse':            'save, title, initdir, default',
\ 'browsedir':         'title, initdir',
\ 'bufexists':         'expr',
\ 'buflisted':         'expr',
\ 'bufloaded':         'expr',
\ 'bufname':           'expr',
\ 'bufnr':             'expr',
\ 'bufwinnr':          'nr',
\ 'byte2line':         'byte',
\ 'byteidx':           'expr, nr',
\ 'byteidxcomp':       'expr, nr',
\ 'call':              'func, arglist[, dict]',
\ 'ceil':              'expr',
\ 'changenr':          '',
\ 'char2nr':           'expr[, utf8]',
\ 'cindent':           'lnum',
\ 'clearmatches':      '',
\ 'col':               'expr',
\ 'complete':          'startcol, matches',
\ 'complete_add':      'expr',
\ 'complete_check':    '',
\ 'confirm':           'msg[, choices[, default[, type]]]',
\ 'copy':              'expr',
\ 'cos':               'expr',
\ 'cosh':              'expr',
\ 'count':             'list, expr[, ic[, start]]',
\ 'cscope_connection': '[num , dbpath[, prepend]]',
\ 'cursor':            'lnum, col[, off] | list',
\ 'deepcopy':          'expr[, noref]',
\ 'delete':            'fname',
\ 'did_filetype':      '',
\ 'diff_filler':       'lnum',
\ 'diff_hlID':         'lnum, col',
\ 'empty':             'expr',
\ 'escape':            'string, chars',
\ 'eval':              'string',
\ 'eventhandler':      '',
\ 'executable':        'expr',
\ 'exepath':           'expr',
\ 'exists':            'var',
\ 'extend':            'expr1, expr2[, expr3]',
\ 'exp':               'expr',
\ 'expand':            'expr[, nosuf[, list]]',
\ 'feedkeys':          'string[, mode]',
\ 'filereadable':      'file',
\ 'filewritable':      'file',
\ 'filter':            'expr, string',
\ 'finddir':           'name[, path[, count]]',
\ 'findfile':          'name[, path[, count]]',
\ 'float2nr':          'expr',
\ 'floor':             'expr',
\ 'fmod':              'expr1, expr2',
\ 'fnameescape':       'fname',
\ 'fnamemodify':       'fname, mods',
\ 'foldclosed':        'lnum',
\ 'foldclosedend':     'lnum',
\ 'foldlevel':         'lnum',
\ 'foldtext':          '',
\ 'foldtextresult':    'lnum',
\ 'foreground':        '',
\ 'function':          'name',
\ 'garbagecollect':    '[atexit]',
\ 'get':               'list, idx[, def] | dict, key[, def]',
\ 'getbufline':        'expr, lnum[, end]',
\ 'getbufvar':         'expr, varname[, def]',
\ 'getcmdline':        '',
\ 'getcmdpos':         '',
\ 'getcmdtype':        '',
\ 'getcmdwintype':     '',
\ 'getcurpos':         '',
\ 'getcwd':            '',
\ 'getfontname':       '[name]',
\ 'getfperm':          'fname',
\ 'getfsize':          'fname',
\ 'getftime':          'fname',
\ 'getftype':          'fname',
\ 'getline':           'lnum[, end]',
\ 'getloclist':        'nr',
\ 'getmatches':        '',
\ 'getpid':            '',
\ 'getpos':            'expr',
\ 'getqflist':         '',
\ 'getreg':            '[regname[, 1[, list]]]',
\ 'getregtype':        '[regname]',
\ 'gettabvar':         'nr, varname[, def]',
\ 'gettabwinvar':      'tabnr, winnr, name[, def]',
\ 'getwinposx':        '',
\ 'getwinposy':        '',
\ 'getwinvar':         'nr, varname[, def]',
\ 'glob':              'expr[, nosuf[, list]]',
\ 'globpath':          'path, expr[, nosuf[, list]]',
\ 'has':               'feature',
\ 'has_key':           'dict, key',
\ 'haslocaldir':       '',
\ 'hasmapto':          'what[, mode[, abbr]]',
\ 'histadd':           'history,item',
\ 'histdel':           'history[, item]',
\ 'histget':           'history[, index]',
\ 'histnr':            'history',
\ 'hlexists':          'name',
\ 'hlID':              'name',
\ 'hostname':          '',
\ 'iconv':             'expr, from, to',
\ 'indent':            'lnum',
\ 'index':             'list, expr[, start[, ic]]',
\ 'input':             'prompt[, text[, completion]]',
\ 'inputdialog':       'p[, t[, c]]',
\ 'inputlist':         'textlist',
\ 'inputrestore':      '',
\ 'inputsave':         '',
\ 'inputsecret':       'prompt[, text]',
\ 'insert':            'list, item[, idx]',
\ 'invert':            'expr',
\ 'isdirectory':       'directory',
\ 'islocked':          'expr',
\ 'items':             'dict',
\ 'join':              'list[, sep]',
\ 'keys':              'dict',
\ 'len':               'expr',
\ 'libcall':           'lib, func, arg',
\ 'libcallnr':         'lib, func, arg',
\ 'line':              'expr',
\ 'line2byte':         'lnum',
\ 'lispindent':        'lnum',
\ 'localtime':         '',
\ 'log':               'expr',
\ 'log10':             'expr',
\ 'luaeval':           'expr[, expr]',
\ 'map':               'expr, string',
\ 'matchadd':          'group, pattern[, priority[, id]]',
\ 'matchaddpos':       'group, list[, priority[, id]]',
\ 'maparg':            'name[, mode[, abbr[, dict]]]',
\ 'mapcheck':          'name[, mode[, abbr]]',
\ 'match':             'expr, pat[, start[, count]]',
\ 'matcharg':          'nr',
\ 'matchdelete':       'id',
\ 'matchend':          'expr, pat[, start[, count]]',
\ 'matchlist':         'expr, pat[, start[, count]]',
\ 'matchstr':          'expr, pat[, start[, count]]',
\ 'max':               'list',
\ 'min':               'list',
\ 'mkdir':             'name[, path[, prot]]',
\ 'mode':              '[expr]',
\ 'mzeval':            'expr',
\ 'nextnonblank':      'lnum',
\ 'nr2char':           'expr[, utf8]',
\ 'or':                'expr, expr',
\ 'pathshorten':       'expr',
\ 'pow':               'x, y',
\ 'prevnonblank':      'lnum',
\ 'printf':            'fmt, expr1...',
\ 'pumvisible':        '',
\ 'pyeval':            'expr',
\ 'py3eval':           'expr',
\ 'range':             'expr[, max[, stride]]',
\ 'readfile':          'fname[, binary[, max]]',
\ 'reltime':           '[start[, end]]',
\ 'reltimestr':        'time',
\ 'remote_expr':       'server, string[, idvar]',
\ 'remote_foreground': 'server',
\ 'remote_peek':       'serverid[, retvar]',
\ 'remote_read':       'serverid',
\ 'remote_send':       'server, string[, idvar]',
\ 'remove':            'list, idx[, end] | dict, key',
\ 'rename':            'from, to',
\ 'repeat':            'expr, count',
\ 'resolve':           'filename',
\ 'reverse':           'list',
\ 'round':             'expr',
\ 'screenattr':        'row, col',
\ 'screenchar':        'row, col',
\ 'screencol':         '',
\ 'screenrow':         '',
\ 'search':            'pattern[, flags[, stopline[, timeout]]]',
\ 'searchdecl':        'name[, global[, thisblock]]',
\ 'searchpair':        'start, middle, end[, flags[, skip[...]]]',
\ 'searchpairpos':     'start, middle, end[, flags[, skip[...]]]',
\ 'searchpos':         'pattern[, flags[, stopline[, timeout]]]',
\ 'server2client':     'clientid, string',
\ 'serverlist':        '',
\ 'setbufvar':         'expr, varname, val',
\ 'setcmdpos':         'pos',
\ 'setline':           'lnum, line',
\ 'setloclist':        'nr, list[, action]',
\ 'setmatches':        'list',
\ 'setpos':            'expr, list',
\ 'setqflist':         'list[, action]',
\ 'setreg':            'n, v[, opt]',
\ 'settabvar':         'nr, varname, val',
\ 'settabwinvar':      'tabnr, winnr, varname, val',
\ 'setwinvar':         'nr, varname, val',
\ 'sha256':            'string',
\ 'shellescape':       'string[, special]',
\ 'shiftwidth':        '',
\ 'simplify':          'filename',
\ 'sin':               'expr',
\ 'sinh':              'expr',
\ 'sort':              'list[, func[, dict]]',
\ 'soundfold':         'word',
\ 'spellbadword':      '',
\ 'spellsuggest':      'word[, max[, capital]]',
\ 'split':             'expr[, pat[, keepempty]]',
\ 'sqrt':              'expr',
\ 'str2float':         'expr',
\ 'str2nr':            'expr[, base]',
\ 'strchars':          'expr',
\ 'strdisplaywidth':   'expr[, col]',
\ 'strftime':          'format[, time]',
\ 'stridx':            'haystack, needle[, start]',
\ 'string':            'expr',
\ 'strlen':            'expr',
\ 'strpart':           'src, start[, len]',
\ 'strridx':           'haystack, needle[, start]',
\ 'strtrans':          'expr',
\ 'strwidth':          'expr',
\ 'submatch':          'nr[, list]',
\ 'substitute':        'expr, pat, sub, flags',
\ 'synID':             'line, col, trans',
\ 'synIDattr':         'synID, what[, mode]',
\ 'synIDtrans':        'synID',
\ 'synconcealed':      'lnum, col',
\ 'synstack':          'lnum, col',
\ 'system':            'expr[, input]',
\ 'systemlist':        'expr[, input]',
\ 'tabpagebuflist':    '[arg]',
\ 'tabpagenr':         '[arg]',
\ 'tabpagewinnr':      'tabarg[, arg]',
\ 'taglist':           'expr',
\ 'tagfiles':          '',
\ 'tempname':          '',
\ 'tan':               'expr',
\ 'tanh':              'expr',
\ 'tolower':           'expr',
\ 'toupper':           'expr',
\ 'tr':                'src, fromstr, tostr',
\ 'trunc':             'expr',
\ 'type':              'name',
\ 'undofile':          'name',
\ 'undotree':          '',
\ 'uniq':              'list[, func[, dict]]',
\ 'values':            'dict',
\ 'virtcol':           'expr',
\ 'visualmode':        '[expr]',
\ 'wildmenumode':      '',
\ 'winbufnr':          'nr',
\ 'wincol':            '',
\ 'winheight':         'nr',
\ 'winline':           '',
\ 'winnr':             '',
\ 'winrestcmd':        '',
\ 'winrestview':       'dict',
\ 'winsaveview':       '',
\ 'winwidth':          'nr',
\ 'writefile':         'list, fname[, binary]',
\ 'xor':               'expr, expr',
\ }
