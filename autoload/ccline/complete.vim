scriptencoding utf-8
let s:save_cpo = &cpo
set cpo&vim

function! ccline#complete#init()
  unlet! s:user_function
  unlet! s:buffer_word
endfunction

function! ccline#complete#complete(args)
  let [A, L, P] = a:args
  let backward = strpart(L, 0, P)
  let Complete = s:get_complete(backward)
  if type(Complete) == type(function('s:null'))
    return call(Complete, a:args)
  endif
  return call(get(s:complete, Complete, function('s:null')), a:args)
endfunction

function! s:get_complete(backward)
  let c = ccline#command#current(a:backward)
  if c == ':'
    return 'command'
  endif
  if empty(c)
    return ''
  endif
  return get(g:ccline#command#command[c], 'complete', '')
endfunction


function! s:command_complete(A, L, P)
  return sort(filter(keys(g:ccline#command#command), 'v:val =~ ''^'' . a:A'))
endfunction

function! ccline#complete#capture(cmd)
  let save_verbose = &verbose
  let &verbose = 0
  try
    redir => result
    execute "silent! " . a:cmd
    redir END
  finally
    let &verbose = save_verbose
  endtry
  return result
endfunction

function! s:get_user_function()
  let function = split(ccline#complete#capture('function'), '[\r\n]')
  call filter(function, "stridx(v:val,'<SNR>')<0")
  return map(function, 's:parse_function_list(v:val)')
endfunction
function! s:parse_function_list(line)
  let function = strpart(a:line, 9)
  let args = matchstr(function, '(\zs.*\ze)')
  if !empty(args)
    let function = strpart(function, 0, stridx(function, '(') + 1)
  endif
  return function
endfunction

function! s:function_complete(A, L, P)
  if !exists('s:user_function')
    let s:user_function = s:get_user_function()
  endif
  return sort(filter(s:user_function + s:default_function, 'v:val =~ ''^'' . a:A'))
endfunction

let s:default_function = [
\ 'abs(',
\ 'acos(',
\ 'add(',
\ 'and(',
\ 'append(',
\ 'argc()',
\ 'argidx()',
\ 'arglistid(',
\ 'argv(',
\ 'asin(',
\ 'atan(',
\ 'atan2(',
\ 'browse(',
\ 'browsedir(',
\ 'bufexists(',
\ 'buffer_exists(',
\ 'buffer_name(',
\ 'buffer_number(',
\ 'buflisted(',
\ 'bufloaded(',
\ 'bufname(',
\ 'bufnr(',
\ 'bufwinnr(',
\ 'byte2line(',
\ 'byteidx(',
\ 'byteidxcomp(',
\ 'call(',
\ 'ceil(',
\ 'changenr()',
\ 'char2nr(',
\ 'cindent(',
\ 'clearmatches()',
\ 'col(',
\ 'complete(',
\ 'complete_add(',
\ 'complete_check()',
\ 'confirm(',
\ 'copy(',
\ 'cos(',
\ 'cosh(',
\ 'count(',
\ 'cscope_connection(',
\ 'cursor(',
\ 'deepcopy(',
\ 'delete(',
\ 'did_filetype()',
\ 'diff_filler(',
\ 'diff_hlID(',
\ 'empty(',
\ 'escape(',
\ 'eval(',
\ 'eventhandler()',
\ 'executable(',
\ 'exepath(',
\ 'exists(',
\ 'exp(',
\ 'expand(',
\ 'extend(',
\ 'feedkeys(',
\ 'file_readable(',
\ 'filereadable(',
\ 'filewritable(',
\ 'filter(',
\ 'finddir(',
\ 'findfile(',
\ 'float2nr(',
\ 'floor(',
\ 'fmod(',
\ 'fnameescape(',
\ 'fnamemodify(',
\ 'foldclosed(',
\ 'foldclosedend(',
\ 'foldlevel(',
\ 'foldtext()',
\ 'foldtextresult(',
\ 'foreground()',
\ 'function(',
\ 'garbagecollect(',
\ 'get(',
\ 'getbufline(',
\ 'getbufvar(',
\ 'getchar(',
\ 'getcharmod()',
\ 'getcmdline()',
\ 'getcmdpos()',
\ 'getcmdtype()',
\ 'getcmdwintype()',
\ 'getcurpos()',
\ 'getcwd()',
\ 'getfontname(',
\ 'getfperm(',
\ 'getfsize(',
\ 'getftime(',
\ 'getftype(',
\ 'getline(',
\ 'getloclist(',
\ 'getmatches()',
\ 'getpid()',
\ 'getpos(',
\ 'getqflist()',
\ 'getreg(',
\ 'getregtype(',
\ 'gettabvar(',
\ 'gettabwinvar(',
\ 'getwinposx()',
\ 'getwinposy()',
\ 'getwinvar(',
\ 'glob(',
\ 'globpath(',
\ 'has(',
\ 'has_key(',
\ 'haslocaldir()',
\ 'hasmapto(',
\ 'highlightID(',
\ 'highlight_exists(',
\ 'histadd(',
\ 'histdel(',
\ 'histget(',
\ 'histnr(',
\ 'hlID(',
\ 'hlexists(',
\ 'hostname()',
\ 'iconv(',
\ 'indent(',
\ 'index(',
\ 'input(',
\ 'inputdialog(',
\ 'inputlist(',
\ 'inputrestore()',
\ 'inputsave()',
\ 'inputsecret(',
\ 'insert(',
\ 'invert(',
\ 'isdirectory(',
\ 'islocked(',
\ 'items(',
\ 'join(',
\ 'keys(',
\ 'last_buffer_nr()',
\ 'len(',
\ 'libcall(',
\ 'libcallnr(',
\ 'line(',
\ 'line2byte(',
\ 'lispindent(',
\ 'localtime()',
\ 'log(',
\ 'log10(',
\ 'luaeval(',
\ 'map(',
\ 'maparg(',
\ 'mapcheck(',
\ 'match(',
\ 'matchadd(',
\ 'matchaddpos(',
\ 'matcharg(',
\ 'matchdelete(',
\ 'matchend(',
\ 'matchlist(',
\ 'matchstr(',
\ 'max(',
\ 'migemo(',
\ 'min(',
\ 'mkdir(',
\ 'mode(',
\ 'nextnonblank(',
\ 'nr2char(',
\ 'or(',
\ 'pathshorten(',
\ 'pow(',
\ 'prevnonblank(',
\ 'printf(',
\ 'pumvisible()',
\ 'py3eval(',
\ 'pyeval(',
\ 'range(',
\ 'readfile(',
\ 'reltime(',
\ 'reltimestr(',
\ 'remote_expr(',
\ 'remote_foreground(',
\ 'remote_peek(',
\ 'remote_read(',
\ 'remote_send(',
\ 'remove(',
\ 'rename(',
\ 'repeat(',
\ 'resolve(',
\ 'reverse(',
\ 'round(',
\ 'screenattr(',
\ 'screenchar(',
\ 'screencol()',
\ 'screenrow()',
\ 'search(',
\ 'searchdecl(',
\ 'searchpair(',
\ 'searchpairpos(',
\ 'searchpos(',
\ 'server2client(',
\ 'serverlist()',
\ 'setbufvar(',
\ 'setcmdpos(',
\ 'setline(',
\ 'setloclist(',
\ 'setmatches(',
\ 'setpos(',
\ 'setqflist(',
\ 'setreg(',
\ 'settabvar(',
\ 'settabwinvar(',
\ 'setwinvar(',
\ 'sha256(',
\ 'shellescape(',
\ 'shiftwidth()',
\ 'simplify(',
\ 'sin(',
\ 'sinh(',
\ 'sort(',
\ 'soundfold(',
\ 'spellbadword(',
\ 'spellsuggest(',
\ 'split(',
\ 'sqrt(',
\ 'str2float(',
\ 'str2nr(',
\ 'strchars(',
\ 'strdisplaywidth(',
\ 'strftime(',
\ 'stridx(',
\ 'string(',
\ 'strlen(',
\ 'strpart(',
\ 'strridx(',
\ 'strtrans(',
\ 'strwidth(',
\ 'submatch(',
\ 'substitute(',
\ 'synID(',
\ 'synIDattr(',
\ 'synIDtrans(',
\ 'synconcealed(',
\ 'synstack(',
\ 'system(',
\ 'systemlist(',
\ 'tabpagebuflist(',
\ 'tabpagenr(',
\ 'tabpagewinnr(',
\ 'tagfiles()',
\ 'taglist(',
\ 'tan(',
\ 'tanh(',
\ 'tempname()',
\ 'test(',
\ 'tolower(',
\ 'toupper(',
\ 'tr(',
\ 'trunc(',
\ 'type(',
\ 'undofile(',
\ 'undotree()',
\ 'uniq(',
\ 'values(',
\ 'virtcol(',
\ 'visualmode(',
\ 'wildmenumode()',
\ 'winbufnr(',
\ 'wincol()',
\ 'winheight(',
\ 'winline()',
\ 'winnr(',
\ 'winrestcmd()',
\ 'winrestview(',
\ 'winsaveview()',
\ 'winwidth(',
\ 'writefile(',
\ 'xor(',
\ ]


function! s:augroup_complete(A, L, P)
  return sort(filter(split(ccline#complete#capture('augroup')), 'v:val =~ ''^'' . a:A'))
endfunction


function! s:parse_buffer_list(line)
  " 9+1
  let buffer = strpart(a:line, 10)
  return strpart(buffer, 0, match(buffer, '\s\+line\s\d\+$') - 1)
endfunction

function! s:buffer_complete(A, L, P)
  let buffers = split(ccline#complete#capture('buffers'), '[\r\n]')
  " no sort
  return filter(map(buffers, 's:parse_buffer_list(v:val)'), 'v:val =~ ''^'' . a:A')
endfunction


function! s:_uniq(list)
	let dict = {}
	for _ in a:list
		let dict[_] = 0
	endfor
	return keys(dict)
endfunction

function! s:buffer_word_complete(A, L, P)
  if !exists('s:buffer_word')
    let s:buffer_word = s:_uniq(filter(split(join(getline(1, '$')), '\W'), '!empty(v:val)'))
  endif
  return sort(filter(s:buffer_word, 'v:val =~ ''^'' . a:A'), 1)
endfunction


function! ccline#complete#option(dict, key, delimiter, value, A, L, P)
  let backward = strpart(a:L, 0, a:P)
  let option = matchlist(backward, '\s\(' . a:key . '\)\s*\%(' . a:delimiter . '\)\(' . a:value . '\)$')
  if !empty(option) && has_key(a:dict, option[1])
    return sort(filter(deepcopy(a:dict[option[1]]), 'v:val =~ ''^'' . option[2]'))
  else
    return sort(filter(keys(a:dict), 'v:val =~ ''^'' . a:A'))
  endif
endfunction

function! s:option_complete(A, L, P)
  return ccline#complete#option(s:option, '[a-z]\+', '[+-^]\?=\|:', '\w*', a:A, a:L, a:P)
endfunction

let s:option = {
\ 'all' : [],
\ 'termcap' : [],
\ 'aleph' : [],
\ 'arabic' : [],
\ 'arabicshape' : [],
\ 'allowrevins' : [],
\ 'altkeymap' : [],
\ 'ambiwidth' : ['single', 'double',],
\ 'autochdir' : [],
\ 'autoindent' : [],
\ 'autoread' : [],
\ 'autowrite' : [],
\ 'autowriteall' : [],
\ 'background' : ['light', 'dark'],
\ 'backspace' : ['indent', 'eol', 'start'],
\ 'backup' : [],
\ 'backupcopy' : ['yes', 'no', 'auto'],
\ 'backupdir' : [],
\ 'backupext' : [],
\ 'backupskip' : [],
\ 'balloondelay' : [],
\ 'ballooneval' : [],
\ 'balloonexpr' : [],
\ 'binary' : [],
\ 'bomb' : [],
\ 'breakat' : [],
\ 'breakindent' : [],
\ 'breakindentopt' : [],
\ 'browsedir' : ['last', 'buffer', 'current'],
\ 'bufhidden' : ['hide', 'unload', 'delete', 'wipe'],
\ 'buflisted' : [],
\ 'buftype' : ['nofile', 'nowrite', 'acwrite', 'quickfix', 'help'],
\ 'casemap' : ['internal', 'keepascii'],
\ 'cdpath' : [],
\ 'cedit' : [],
\ 'charconvert' : [],
\ 'cindent' : [],
\ 'cinkeys' : [],
\ 'cinoptions' : [],
\ 'cinwords' : [],
\ 'clipboard' : [],
\ 'cmdheight' : [],
\ 'cmdwinheight' : [],
\ 'colorcolumn' : [],
\ 'columns' : [],
\ 'comments' : [],
\ 'commentstring' : [],
\ 'compatible' : [],
\ 'complete' : [],
\ 'concealcursor' : [],
\ 'conceallevel' : [],
\ 'completefunc' : [],
\ 'completeopt' : [],
\ 'confirm' : [],
\ 'copyindent' : [],
\ 'cpoptions' : [],
\ 'cryptmethod' : [],
\ 'cscopepathcomp' : [],
\ 'cscopeprg' : [],
\ 'cscopequickfix' : [],
\ 'cscoperelative' : [],
\ 'cscopetag' : [],
\ 'cscopetagorder' : [],
\ 'cscopeverbose' : [],
\ 'cursorbind' : [],
\ 'cursorcolumn' : [],
\ 'cursorline' : [],
\ 'debug' : [],
\ 'define' : [],
\ 'delcombine' : [],
\ 'dictionary' : [],
\ 'diff' : [],
\ 'diffexpr' : [],
\ 'diffopt' : [],
\ 'digraph' : [],
\ 'directory' : [],
\ 'display' : [],
\ 'eadirection' : [],
\ 'edcompatible' : [],
\ 'encoding' : [],
\ 'endofline' : [],
\ 'equalalways' : [],
\ 'equalprg' : [],
\ 'errorbells' : [],
\ 'errorfile' : [],
\ 'errorformat' : [],
\ 'esckeys' : [],
\ 'eventignore' : [],
\ 'expandtab' : [],
\ 'exrc' : [],
\ 'fileencoding' : [],
\ 'fileencodings' : [],
\ 'fileformat' : [],
\ 'fileformats' : [],
\ 'fileignorecase' : [],
\ 'filetype' : [],
\ 'fillchars' : [],
\ 'fkmap' : [],
\ 'foldclose' : [],
\ 'foldcolumn' : [],
\ 'foldenable' : [],
\ 'foldexpr' : [],
\ 'foldignore' : [],
\ 'foldlevel' : [],
\ 'foldlevelstart' : [],
\ 'foldmarker' : [],
\ 'foldmethod' : [],
\ 'foldminlines' : [],
\ 'foldnestmax' : [],
\ 'foldopen' : [],
\ 'foldtext' : [],
\ 'formatexpr' : [],
\ 'formatoptions' : [],
\ 'formatlistpat' : [],
\ 'formatprg' : [],
\ 'gdefault' : [],
\ 'grepformat' : [],
\ 'grepprg' : [],
\ 'guicursor' : [],
\ 'helpfile' : [],
\ 'helpheight' : [],
\ 'helplang' : [],
\ 'hidden' : [],
\ 'highlight' : [],
\ 'history' : [],
\ 'hkmap' : [],
\ 'hkmapp' : [],
\ 'hlsearch' : [],
\ 'icon' : [],
\ 'iconstring' : [],
\ 'ignorecase' : [],
\ 'iminsert' : [],
\ 'imsearch' : [],
\ 'include' : [],
\ 'includeexpr' : [],
\ 'incsearch' : [],
\ 'indentexpr' : [],
\ 'indentkeys' : [],
\ 'infercase' : [],
\ 'insertmode' : [],
\ 'isfname' : [],
\ 'isident' : [],
\ 'iskeyword' : [],
\ 'isprint' : [],
\ 'joinspaces' : [],
\ 'key' : [],
\ 'keymap' : [],
\ 'keymodel' : [],
\ 'keywordprg' : [],
\ 'langmap' : [],
\ 'langmenu' : [],
\ 'laststatus' : [],
\ 'lazyredraw' : [],
\ 'linebreak' : [],
\ 'lines' : [],
\ 'lisp' : [],
\ 'lispwords' : [],
\ 'list' : [],
\ 'listchars' : [],
\ 'loadplugins' : [],
\ 'magic' : [],
\ 'makeef' : [],
\ 'makeprg' : [],
\ 'matchpairs' : [],
\ 'matchtime' : [],
\ 'maxcombine' : [],
\ 'maxfuncdepth' : [],
\ 'maxmapdepth' : [],
\ 'maxmem' : [],
\ 'maxmempattern' : [],
\ 'maxmemtot' : [],
\ 'menuitems' : [],
\ 'migemo' : [],
\ 'migemodict' : [],
\ 'mkspellmem' : [],
\ 'modeline' : [],
\ 'modelines' : [],
\ 'modifiable' : [],
\ 'modified' : [],
\ 'more' : [],
\ 'mouse' : [],
\ 'mousemodel' : [],
\ 'mousetime' : [],
\ 'nrformats' : [],
\ 'number' : [],
\ 'numberwidth' : [],
\ 'omnifunc' : [],
\ 'opendevice' : [],
\ 'operatorfunc' : [],
\ 'paragraphs' : [],
\ 'paste' : [],
\ 'pastetoggle' : [],
\ 'patchexpr' : [],
\ 'patchmode' : [],
\ 'path' : [],
\ 'preserveindent' : [],
\ 'previewheight' : [],
\ 'previewwindow' : [],
\ 'printdevice' : [],
\ 'printfont' : [],
\ 'printheader' : [],
\ 'printoptions' : [],
\ 'prompt' : [],
\ 'pumheight' : [],
\ 'quoteescape' : [],
\ 'readonly' : [],
\ 'redrawtime' : [],
\ 'regexpengine' : [],
\ 'relativenumber' : [],
\ 'remap' : [],
\ 'report' : [],
\ 'restorescreen' : [],
\ 'revins' : [],
\ 'rightleft' : [],
\ 'rightleftcmd' : [],
\ 'ruler' : [],
\ 'rulerformat' : [],
\ 'runtimepath' : [],
\ 'scroll' : [],
\ 'scrollbind' : [],
\ 'scrolljump' : [],
\ 'scrolloff' : [],
\ 'scrollopt' : [],
\ 'sections' : [],
\ 'secure' : [],
\ 'selection' : [],
\ 'selectmode' : [],
\ 'sessionoptions' : [],
\ 'shell' : [],
\ 'shellcmdflag' : [],
\ 'shellpipe' : [],
\ 'shellquote' : [],
\ 'shellredir' : [],
\ 'shellslash' : [],
\ 'shelltemp' : [],
\ 'shellxquote' : [],
\ 'shellxescape' : [],
\ 'shiftround' : [],
\ 'shiftwidth' : [],
\ 'shortmess' : [],
\ 'shortname' : [],
\ 'showbreak' : [],
\ 'showcmd' : [],
\ 'showfulltag' : [],
\ 'showmatch' : [],
\ 'showmode' : [],
\ 'showtabline' : [],
\ 'sidescroll' : [],
\ 'sidescrolloff' : [],
\ 'smartcase' : [],
\ 'smartindent' : [],
\ 'smarttab' : [],
\ 'softtabstop' : [],
\ 'spell' : [],
\ 'spellcapcheck' : [],
\ 'spellfile' : [],
\ 'spelllang' : [],
\ 'spellsuggest' : [],
\ 'splitbelow' : [],
\ 'splitright' : [],
\ 'startofline' : [],
\ 'statusline' : [],
\ 'suffixes' : [],
\ 'suffixesadd' : [],
\ 'swapfile' : [],
\ 'swapsync' : [],
\ 'switchbuf' : [],
\ 'synmaxcol' : [],
\ 'syntax' : [],
\ 'tabline' : [],
\ 'tabpagemax' : [],
\ 'tabstop' : [],
\ 'tagbsearch' : [],
\ 'taglength' : [],
\ 'tagrelative' : [],
\ 'tags' : [],
\ 'tagstack' : [],
\ 'term' : [],
\ 'termbidi' : [],
\ 'termencoding' : [],
\ 'terse' : [],
\ 'textauto' : [],
\ 'textmode' : [],
\ 'textwidth' : [],
\ 'thesaurus' : [],
\ 'tildeop' : [],
\ 'timeout' : [],
\ 'timeoutlen' : [],
\ 'title' : [],
\ 'titlelen' : [],
\ 'titleold' : [],
\ 'titlestring' : [],
\ 'ttimeout' : [],
\ 'ttimeoutlen' : [],
\ 'ttybuiltin' : [],
\ 'ttyfast' : [],
\ 'ttyscroll' : [],
\ 'ttytype' : [],
\ 'undodir' : [],
\ 'undofile' : [],
\ 'undolevels' : [],
\ 'undoreload' : [],
\ 'updatecount' : [],
\ 'updatetime' : [],
\ 'verbose' : [],
\ 'verbosefile' : [],
\ 'viewdir' : [],
\ 'viewoptions' : [],
\ 'viminfo' : [],
\ 'virtualedit' : [],
\ 'visualbell' : [],
\ 'warn' : [],
\ 'weirdinvert' : [],
\ 'whichwrap' : [],
\ 'wildchar' : [],
\ 'wildcharm' : [],
\ 'wildignore' : [],
\ 'wildignorecase' : [],
\ 'wildmenu' : [],
\ 'wildmode' : [],
\ 'wildoptions' : [],
\ 'window' : [],
\ 'winheight' : [],
\ 'winfixheight' : [],
\ 'winfixwidth' : [],
\ 'winminheight' : [],
\ 'winminwidth' : [],
\ 'winwidth' : [],
\ 'wrap' : [],
\ 'wrapmargin' : [],
\ 'wrapscan' : [],
\ 'write' : [],
\ 'writeany' : [],
\ 'writebackup' : [],
\ 'writedelay' : [],
\ }



function! s:null(...)
  return []
endfunction

let s:complete = {
\ 'command' : function('s:command_complete'),
\ 'function' : function('s:function_complete'),
\ 'augroup' : function('s:augroup_complete'),
\ 'buffer' : function('s:buffer_complete'),
\ 'option' : function('s:option_complete'),
\ 'buffer_word' : function('s:buffer_word_complete'),
\ }


let &cpo = s:save_cpo
unlet s:save_cpo
